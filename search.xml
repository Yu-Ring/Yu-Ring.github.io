<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb开发-项目-tlias笔记</title>
      <link href="/2023/09/28/WEB%E5%BC%80%E5%8F%91-%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B/"/>
      <url>/2023/09/28/WEB%E5%BC%80%E5%8F%91-%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>完成智能学习辅助系统的<strong>部门管理</strong>和<strong>员工管理</strong><br>完成部门管理的 查询 新增 修改 删除<br>完成员工信息的 查询（条件分页） 新增 修改 删除</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20230928014129.png" alt="image.png"></p><ul><li><p>准备数据库表 </p><blockquote><p>员工-部门：一对多结构 dept emp </p></blockquote></li><li><p>创建SpringBoot项目工程</p><blockquote><p>引入依赖：web起步依赖、Mybatis依赖（mybatis起步依赖+mysql驱动）、Lombok简化操作工具</p></blockquote></li><li><p>引入mybatis信息</p><blockquote><p>在配置文件<code>application.properties</code>中引入mybatis信息并准备相应的实体类</p></blockquote></li><li><p>准备3层解耦架构</p><blockquote><p>准备实体类对应的Mapper接口，Service（接口+实现类），Controller</p></blockquote></li></ul><h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><ul><li><p>引入数据源 创建tlias数据库 运行以下sql脚本快速构建数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 部门管理</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;部门名称&#x27;</span>,</span><br><span class="line">    create_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept (id, name, create_time, update_time) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;学工部&#x27;</span>,now(),now()),(<span class="number">2</span>,<span class="string">&#x27;教研部&#x27;</span>,now(),now()),(<span class="number">3</span>,<span class="string">&#x27;咨询部&#x27;</span>,now(),now()), (<span class="number">4</span>,<span class="string">&#x27;就业部&#x27;</span>,now(),now()),(<span class="number">5</span>,<span class="string">&#x27;人事部&#x27;</span>,now(),now());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工管理(带约束)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">  id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;123456&#x27;</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  gender tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;性别, 说明: 1 男, 2 女&#x27;</span>,</span><br><span class="line">  image <span class="type">varchar</span>(<span class="number">300</span>) comment <span class="string">&#x27;图像&#x27;</span>,</span><br><span class="line">  job tinyint unsigned comment <span class="string">&#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;</span>,</span><br><span class="line">  entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">  dept_id <span class="type">int</span> unsigned comment <span class="string">&#x27;部门ID&#x27;</span>,</span><br><span class="line">  create_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  update_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp</span><br><span class="line">(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;jinyong&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;金庸&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1.jpg&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;2000-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;zhangwuji&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张无忌&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2015-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;yangxiao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;杨逍&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;3.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2008-05-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;weiyixiao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;韦一笑&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;4.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2007-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;changyuchun&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;常遇春&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;5.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2012-12-05&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;xiaozhao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;小昭&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;6.jpg&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;2013-09-05&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;jixiaofu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;纪晓芙&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;7.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2005-08-01&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;zhouzhiruo&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;周芷若&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;8.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2014-11-09&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;dingminjun&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;丁敏君&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;9.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2011-03-11&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;zhaomin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;10.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2013-09-05&#x27;</span>,<span class="number">1</span>,now(),now()),</span><br><span class="line">(<span class="number">11</span>,<span class="string">&#x27;luzhangke&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;鹿杖客&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;11.jpg&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;2007-02-01&#x27;</span>,<span class="number">3</span>,now(),now()),</span><br><span class="line">(<span class="number">12</span>,<span class="string">&#x27;hebiweng&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;鹤笔翁&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;12.jpg&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;2008-08-18&#x27;</span>,<span class="number">3</span>,now(),now()),</span><br><span class="line">(<span class="number">13</span>,<span class="string">&#x27;fangdongbai&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;方东白&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;13.jpg&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;2012-11-01&#x27;</span>,<span class="number">3</span>,now(),now()),</span><br><span class="line">(<span class="number">14</span>,<span class="string">&#x27;zhangsanfeng&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;张三丰&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;14.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2002-08-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">15</span>,<span class="string">&#x27;yulianzhou&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;俞莲舟&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;15.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2011-05-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">16</span>,<span class="string">&#x27;songyuanqiao&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;宋远桥&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;16.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2007-01-01&#x27;</span>,<span class="number">2</span>,now(),now()),</span><br><span class="line">(<span class="number">17</span>,<span class="string">&#x27;chenyouliang&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;陈友谅&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;17.jpg&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;2015-03-21&#x27;</span>,<span class="keyword">NULL</span>,now(),now());</span><br></pre></td></tr></table></figure></li><li><p>创建项目<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20230928014211.png" alt="image.png"></p></li><li><p>引入依赖<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20230928014233.png" alt="image.png"></p></li><li><p>准备配置信息(数据库连接+mybatis配置以及驼峰映射开关)(username和password写你自己的数据库)</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/tlias</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl  </span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li><li><p>编写实体类pojo（添加Lombok的注解）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Integer id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;  </span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Integer id; <span class="comment">//ID  </span></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//用户名  </span></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">//密码  </span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//姓名  </span></span><br><span class="line">    <span class="keyword">private</span> Short gender; <span class="comment">//性别 , 1 男, 2 女  </span></span><br><span class="line">    <span class="keyword">private</span> String image; <span class="comment">//图像url  </span></span><br><span class="line">    <span class="keyword">private</span> Short job; <span class="comment">//职位 1 班主任 2 讲师 3 学工主管 4 教研主管 5 咨询师  </span></span><br><span class="line">    <span class="keyword">private</span> LocalDate entrydate; <span class="comment">//入职日期  </span></span><br><span class="line">    <span class="keyword">private</span> Integer deptId; <span class="comment">//部门ID  </span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime; <span class="comment">//创建时间  </span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime; <span class="comment">//修改时间  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写实体类对应的Service接口和实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptService</span> &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Controller控制层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptMapper</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20230928014300.png" alt="image.png"></p></li></ul><h4 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h4><ul><li><p>需要提供<strong>请求路径+请求方式+接口描述</strong></p></li><li><p>开发规范REST（REpresentational State Transfer）表述性状态转换<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20230928014327.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20230928014344.png" alt="image.png"></p></li><li><p>统一响应结果Result类(pojo实体类下创建Result类)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败  </span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应信息 描述字符串  </span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//增删改 成功响应  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//查询 成功响应  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,data);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//失败响应  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h4><p><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20230928014420.png" alt="image.png"></p><h2 id="部门管理"><a href="#部门管理" class="headerlink" title="部门管理"></a>部门管理</h2><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>[[api接口文档#1.1 部门列表查询]]</p><blockquote><p>请求路径：&#x2F;depts<br>请求方式：GET<br>接口描述：该接口用于部门列表数据查询</p></blockquote><ul><li>思路<blockquote><p>浏览器前端 –&gt; Controller（接收+调用service+响应） –&gt; Service（完善实现类，调用Mapper接口） –&gt; Mapper（数据库语句） –&gt; 数据库</p></blockquote></li></ul><h6 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h6><ul><li>在Controller层中，以DeptController为例，暂不处理请求返回值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/depts&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;  </span><br><span class="line"><span class="comment">// 请求处理</span></span><br><span class="line">        <span class="keyword">return</span> Result.success();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&#x3D;&#x3D;log记录处理方法：&#x3D;&#x3D;[[WEB开发-案例项目-附件#log记录]]<br>&#x3D;&#x3D;设置请求方式：&#x3D;&#x3D;[[WEB开发-案例项目-附件#设置请求方式]]</li><li>Controller层中调用注入Service接口，处理响应<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/depts&quot;,method = RequestMethod.GET)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;  </span><br><span class="line">        log.info(<span class="string">&quot;查询全部部门数据&quot;</span>);  </span><br><span class="line">        List&lt;Dept&gt; deptList = deptService.list();  </span><br><span class="line">        <span class="keyword">return</span> Result.success();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&#x3D;&#x3D;实现类的方法快速生成：<code>alt+Enter</code>&#x3D;&#x3D;</li><li>Service层中，完善接口<code>List&lt;Dept&gt; list();</code>以及对应的实现类方法（<em>行数列表有按钮可快速跳转到实现类</em>），实现类中调用注入Mapper接口来查询数据库<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> deptMapper.list();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>完善mapper接口的sql注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptMapper</span> &#123;  </span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * from dept&quot;)</span>  </span><br><span class="line">    List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>最后记得修改DeptController返回的方法<code>return Result.success(deptList);</code>修改响应返回值</li><li>利用Http请求工具测试GET <code>localhost:8080/depts</code></li></ul><h6 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h6><blockquote><p>通过访问前端工程来访问服务端程序，进而进行调试。</p></blockquote><ul><li>启动以及部署在nginx服务器的前端程序 <a href="localhost:90">访问</a></li></ul><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>[[api接口文档#1.2 删除部门]]</p><blockquote><p>请求路径：&#x2F;depts&#x2F;{id}<br>请求方式：DELETE<br>接口描述：该接口用于根据ID删除部门数据</p></blockquote><ul><li>思路<blockquote><p>浏览器前端 –&gt; Controller（接收(<code>@DeleteMapping</code>请求参数<code>@PathVariable</code> id)+调用service+响应） –&gt; Service（完善实现类，调用Mapper接口） –&gt; Mapper（数据库语句） –&gt; 数据库</p></blockquote></li></ul><h6 id="具体操作-1"><a href="#具体操作-1" class="headerlink" title="具体操作"></a>具体操作</h6><ul><li>Controller层处理接收，注解<code>@DeleteMapping(&quot;/depts/&#123;id&#125;&quot;)</code>，函数参数<code>@PathVariable Integer id</code>，调用注入Service接口，无需处理响应返回值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/depts/&#123;id&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;  </span><br><span class="line">    log.info(<span class="string">&quot;根据id删除部门：&#123;&#125;&quot;</span>,id);  <span class="comment">// &#123;&#125;表示参数占位符</span></span><br><span class="line">    <span class="comment">// 调用service接口删除部门  </span></span><br><span class="line">    deptService.delete(id);  </span><br><span class="line">    <span class="keyword">return</span> Result.success();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>到Service层中完善接口<code>void delete(Integer id);</code>，接口的实现类，并调用注入Mapper接口的sql删除语句<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;  </span><br><span class="line">    deptMapper.deleteById(id);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>完善mapper的接口和sql注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptMapper</span> &#123;  </span><br><span class="line">    <span class="meta">@Delete(&quot;delete from dept where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>利用Http请求工具测试 DELETE <code>localhost:8080/depts/5</code></li></ul><h6 id="前后端联调-1"><a href="#前后端联调-1" class="headerlink" title="前后端联调"></a>前后端联调</h6><ul><li>启动以及部署在nginx服务器的前端程序 <a href="localhost:90">访问</a></li><li>点击前端程序的删除</li></ul><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><p>[[api接口文档#1.3 添加部门]]</p><blockquote><p>请求路径：&#x2F;depts<br>请求方式：POST<br>接口描述：该接口用于添加部门数据</p></blockquote><ul><li>思路<blockquote><p>浏览器前端 –&gt; Controller（接收(<code>@PostMapping</code>+封装实体类注解<code>@RequestBody</code>)+调用service+响应） –&gt; Service（完善实现类，调用Mapper接口） –&gt; Mapper（数据库语句） –&gt; 数据库</p></blockquote></li></ul><h6 id="具体操作-2"><a href="#具体操作-2" class="headerlink" title="具体操作"></a>具体操作</h6><ul><li>Controller层处理，注解<code>@PostMapping(&quot;/depts&quot;)</code>+参数<code>@RequestBody Dept dept</code>，调用Service接口，无需处理响应返回值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/depts&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Dept dept)</span>&#123;  </span><br><span class="line">        log.info(<span class="string">&quot;新增部门：&#123;&#125;&quot;</span>,dept);  </span><br><span class="line">        <span class="comment">// 调用service新增部门  </span></span><br><span class="line">        deptService.add(dept);  </span><br><span class="line">        <span class="keyword">return</span> Result.success();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Service层中完善接口<code>void add(Dept dept);</code>，接口的实现类完善其他属性信息，并调用注入Mapper接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Dept dept)</span> &#123;  </span><br><span class="line">    <span class="comment">//补全属性  </span></span><br><span class="line">    dept.setCreateTime(LocalDateTime.now());  </span><br><span class="line">    dept.setUpdateTime(LocalDateTime.now());  </span><br><span class="line">    deptMapper.insert(dept);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>完善mapper的接口和sql注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptMapper</span> &#123;  </span><br><span class="line">    <span class="meta">@Insert(&quot;insert into dept (name, create_time, update_time) values (#&#123;name&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;);&quot;)</span>  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Dept dept)</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>利用Http请求工具测试POST <code>localhost:8080/depts</code>, 并编写附带的JSON数据中<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;就业部&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="前后端联调-2"><a href="#前后端联调-2" class="headerlink" title="前后端联调"></a>前后端联调</h6><ul><li>打开ngnix的前端，选择增加部门，并查询数据库检查是否成功</li></ul><h4 id="路径优化"><a href="#路径优化" class="headerlink" title="路径优化"></a>路径优化</h4><p>对于Controller层的多个不同方式但具有公共的路径<code>&quot;/depts&quot;</code>的请求，可以抽取到类定义上<code>@RequestMapping(&quot;/depts&quot;)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/depts&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;  </span><br><span class="line">        List&lt;Dept&gt; deptList = deptService.list();  </span><br><span class="line">        <span class="keyword">return</span> Result.success(deptList);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/depts/&#123;id&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;  </span><br><span class="line">        deptService.delete(id);  </span><br><span class="line">        <span class="keyword">return</span> Result.success();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/depts&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Dept dept)</span>&#123;  </span><br><span class="line">        deptService.add(dept);  </span><br><span class="line">        <span class="keyword">return</span> Result.success();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/depts&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span> </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;  </span><br><span class="line">        List&lt;Dept&gt; deptList = deptService.list();  </span><br><span class="line">        <span class="keyword">return</span> Result.success(deptList);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;  </span><br><span class="line">        deptService.delete(id);  </span><br><span class="line">        <span class="keyword">return</span> Result.success();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Dept dept)</span>&#123;  </span><br><span class="line">        deptService.add(dept);  </span><br><span class="line">        <span class="keyword">return</span> Result.success();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ID查询-自行实现"><a href="#ID查询-自行实现" class="headerlink" title="ID查询(自行实现)"></a>ID查询(自行实现)</h4><blockquote><p>请求路径：&#x2F;depts&#x2F;{id}<br>请求方式：GET<br>接口描述：该接口用于根据ID查询部门数据</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/depts/&#123;id&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">SearchById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;  </span><br><span class="line">    log.info(<span class="string">&quot;查询id部门：&#123;&#125;&quot;</span>,id);  </span><br><span class="line">    <span class="type">Dept</span> <span class="variable">depted</span> <span class="operator">=</span> deptService.searchById(id);  </span><br><span class="line">    <span class="keyword">return</span> Result.success(depted);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> Dept <span class="title function_">searchById</span><span class="params">(Integer id)</span> &#123;  </span><br><span class="line">    <span class="type">Dept</span> <span class="variable">depted</span> <span class="operator">=</span> deptMapper.searchById(id);  </span><br><span class="line">    <span class="keyword">return</span> depted;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from dept where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line">Dept <span class="title function_">searchById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><ul><li>测试请求GET <code>localhost:8080/depts/1</code></li></ul><h4 id="修改部门-自行实现"><a href="#修改部门-自行实现" class="headerlink" title="修改部门(自行实现)"></a>修改部门(自行实现)</h4><blockquote><p>请求路径：&#x2F;depts<br>请求方式：PUT<br>接口描述：该接口用于修改部门数据</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/depts&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">UpdateById</span><span class="params">(<span class="meta">@RequestBody</span> Dept dept)</span>&#123;  </span><br><span class="line">    deptService.updateById(dept);  </span><br><span class="line">    <span class="keyword">return</span> Result.success();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateById</span><span class="params">(Dept dept)</span> &#123;  </span><br><span class="line">    dept.setCreateTime(LocalDateTime.now());  </span><br><span class="line">    dept.setUpdateTime(LocalDateTime.now());  </span><br><span class="line">    deptMapper.updateById(dept);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update(&quot;update dept set name = #&#123;name&#125;, create_time = #&#123;createTime&#125;, update_time = #&#123;updateTime&#125; where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateById</span><span class="params">(Dept dept)</span>;</span><br></pre></td></tr></table></figure><ul><li>测试请求PUT<code>localhost:8080/depts</code><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;教xue部&quot;</span> <span class="comment">//name是唯一键值，保证不要重复</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h2><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><blockquote><p>分页查询：<code>select * from [表名] limit [起始索引], [查询条数]</code></p></blockquote><ul><li>[[api接口文档#2.1 员工列表查询]]<blockquote><p>请求路径：&#x2F;emps<br>请求方式：GET<br>接口描述：该接口用于员工列表数据的条件分页查询</p></blockquote></li><li>思路<blockquote><p>前端需要后端同时返回两个数据：<em>总记录数<code>total</code>+列表数据<code>rows[]</code><em>。**前端  —(当前页码<code>pages</code>+每页展示记录数<code>pageSize</code>)—&gt; 后端</em></em><br>同时前端要向后端提供参数：<em>当前页码<code>pages</code>+数据列表<code>rows[]</code><em>。**后端  —(数据列表<code>rows[]</code>+总记录数<code>total</code>)—&gt; 前端</em></em><br><code>select * from emp limit ?, ?;</code><br><code>select count(*) from emp;</code><br>需要返回的数据类型有多个，考虑把<code>rows[]</code>和<code>total</code>封装到一个实体类<code>PageBean</code>中</p></blockquote></li></ul><h6 id="具体操作-3"><a href="#具体操作-3" class="headerlink" title="具体操作"></a>具体操作</h6><ul><li>定义<code>PageBean</code>实体类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Long total; <span class="comment">//总记录数  </span></span><br><span class="line">    <span class="keyword">private</span> List rows; <span class="comment">//数据列表  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Mapper接口两个sql语句<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;  </span><br><span class="line">    <span class="meta">@Select(&quot;select count(*) from emp;&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">count</span><span class="params">()</span>;  </span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Select(&quot;select * from emp limit #&#123;start&#125;, #&#123;pageSize&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">page</span><span class="params">(Integer start, Integer pageSize)</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Controller层接收<code>page</code>和<code>pageSize</code>参数，并设置默认值 [[WEB开发-案例项目-附件#Controller接收参数默认值]]，调用Service接口获取封装的<code>pagebean</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> EmpService empService;  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/emps&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,  </span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize)</span>&#123;  </span><br><span class="line">        log.info(<span class="string">&quot;分页查询，参数：&#123;&#125;, &#123;&#125;&quot;</span>, page, pageSize);  </span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> empService.page(page, pageSize);  </span><br><span class="line">        <span class="keyword">return</span> Result.success(pageBean);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现Service接口，调用Mapper接口获取数据，获取总记录数<code>count</code>和列表数据<code>empList</code>，并封装<code>pageBean</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize)</span> &#123;  </span><br><span class="line">        <span class="comment">//1. 获取总记录数  </span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> empMapper.count();  </span><br><span class="line">        <span class="comment">//2. 获取分页查询结果列表  </span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">start</span> <span class="operator">=</span> (page - <span class="number">1</span>) * pageSize;  </span><br><span class="line">        List&lt;Emp&gt; empList = empMapper.page(start, pageSize);  </span><br><span class="line">        <span class="comment">//3. 封装PageBean对象  </span></span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(count, empList);  </span><br><span class="line">        <span class="keyword">return</span> pageBean;    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>HTTP调试工具GET <code>localhost:8080/emps</code> 和 <code>localhost:8080/emps?page=2&amp;pageSize=5</code></li><li>Nginx前后端联调</li></ul><h6 id="分页插件PageHelper"><a href="#分页插件PageHelper" class="headerlink" title="分页插件PageHelper"></a>分页插件PageHelper</h6><blockquote><p>普通的分页查询中，Mapper层要调用复杂的条件查询+Service层调用Mapper层接口获取数据并处理参数和封装<br>Mybatis框架下提供了一个插件<code>PageHelper</code>，Mapper层只需要获取完整表(无条件查询)，在Service层通过<code>PageHelper.startPage(page,pageSize)</code>设置分页参数，通过<code>Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) [完整表]</code>获取转化数据，最后封装即可。省去了处理过程。<br>本质是插件在service层转化数据时，自动运行并获取到了count数和条件查询列表数据</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Mapper层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from emp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li>Service层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize)</span>&#123;  </span><br><span class="line">    <span class="comment">//设置分页参数  </span></span><br><span class="line">    PageHelper.startPage(page,pageSize);  </span><br><span class="line">    <span class="comment">//查询  </span></span><br><span class="line">    Page&lt;Emp&gt; page1 = (Page&lt;Emp&gt;) empMapper.list();  </span><br><span class="line">    <span class="comment">//封装PageBean对象  </span></span><br><span class="line">    <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(page1.getTotal(),page1.getResult());  </span><br><span class="line">    <span class="keyword">return</span> pageBean;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="条件分页查询"><a href="#条件分页查询" class="headerlink" title="条件分页查询"></a>条件分页查询</h6><blockquote><p>条件查询员工：<code>select * from emp where name like concat (&#39;%&#39;,&#39;张&#39;,&#39;%&#39;) and gender = 1 and entrydate between &#39;2000-01-01&#39; and &#39;2010-01-01&#39; order by update_time desc</code></p></blockquote><ul><li>增加查询必要的参数：controller层增加参数以及必要的格式注解+service接口参数+mapper参数</li><li>mysql语句的动态映射xml<blockquote><p>新建一个目录，要求与mapper所在的com包目录保持一直。比如<code>com.yuring.mapper</code>，则在resources下定义目录<code>com/yuring/mapper</code>。xml文件名与对于java文件保持一致，<strong>同时要删去mapper接口的注释防止冲突</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;[全类名]&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--  内容  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;[方法名]&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;[全类名]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>通过select标签引入sql语句，并使用预编译参数占位符<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.tlias.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  内容  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.tlias.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from emp</span><br><span class="line">        where</span><br><span class="line">            name like concat (&#x27;%&#x27;,&#x27;#&#123;name&#125;&#x27;,&#x27;%&#x27;)</span><br><span class="line">          and gender = #&#123;gender&#125;</span><br><span class="line">          and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">        order by update_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>由于有些参数不一定会传递，要进行动态sql化 <code>&lt;if&gt; &lt;where&gt;</code>标签，&#x3D;&#x3D;由于string值null和string空串<code>&quot;&quot;</code>并不相同，要做额外判断<code>and name != &#39;&#39;</code>&#x3D;&#x3D;<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.tlias.mapper.EmpMapper&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--  内容  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.tlias.pojo.Emp&quot;</span>&gt;</span>  </span><br><span class="line">        select *  </span><br><span class="line">        from emp        <span class="tag">&lt;<span class="name">where</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span>  </span><br><span class="line">                name like concat (&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span>  </span><br><span class="line">                and gender = #&#123;gender&#125;  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span>  </span><br><span class="line">                and entrydate between #&#123;begin&#125; and #&#123;end&#125;  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span>  </span><br><span class="line">        order by update_time desc  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>HTTP测试接口<code>localhost:8080/emps?page=1&amp;pageSize=5&amp;name=张&amp;gender=1&amp;begin=2000-01-01&amp;end=2010-01-01</code></li><li>前后端联调</li></ul><h4 id="删除员工"><a href="#删除员工" class="headerlink" title="删除员工"></a>删除员工</h4><blockquote><p>批量删除：<code>delete from emp where id in (1,2,3)</code></p></blockquote><ul><li>[[api接口文档#2.2 删除员工]]<blockquote><p>请求路径：&#x2F;emps&#x2F;{ids}<br>请求方式：DELETE<br>接口描述：该接口用于批量删除员工的数据信息</p></blockquote></li><li>思路<blockquote><p>controller接收参数id+调用service+响应，service层调用mapper接口执行删除操作，Mapper使用动态sql进行映射(<code>&lt;foreach&gt;标签</code>)<br><code>&lt;foreach&gt;标签</code>：<code>&lt;foreach collection=&quot;遍历集合&quot; item=&quot;指代元素&quot; separator=&quot;元素间分割符&quot; open=&quot;开头拼接符&quot; close=&quot;结尾拼接符&quot;&gt;#&#123;id&#125;&lt;/foreach&gt;</code></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// controller层</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/emps/&#123;ids&#125;&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> List&lt;Integer&gt; ids)</span>&#123;  </span><br><span class="line">    log.info(<span class="string">&quot;删除部门，参数&#123;&#125;&quot;</span>, ids);  </span><br><span class="line">    empService.deleteById(ids);  </span><br><span class="line">    <span class="keyword">return</span> Result.success();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(List&lt;Integer&gt; ids)</span> &#123;  </span><br><span class="line">    empMapper.deleteById(ids);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mapper.java</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(List&lt;Integer&gt; ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span>  </span><br><span class="line">    delete from emp where id in  </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span>#&#123;id&#125;<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>HTTP请求<br><code>localhost:8080/emps/15,16,17</code></li></ul><h4 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h4><ul><li>[[api接口文档#2.3 添加员工]]<blockquote><p>请求路径：&#x2F;emps<br>请求方式：POST<br>接口描述：该接口用于添加员工的信息</p></blockquote></li><li>思路<blockquote><p>controller接收数据封装参数<code>@PostMapping</code>+<code>@RequestBody</code>，service层补充实体类属性+调用mapper接口，Mapper使用动态sql进行映射</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/emps&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Emp emp)</span>&#123;  </span><br><span class="line">    log.info(<span class="string">&quot;新增员工，emp：&#123;&#125;&quot;</span>,emp);  </span><br><span class="line">    empService.save(emp);  </span><br><span class="line">    <span class="keyword">return</span> Result.success();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Service层</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Emp emp)</span> &#123;  </span><br><span class="line">    emp.setCreateTime(LocalDateTime.now());  </span><br><span class="line">    emp.setUpdateTime(LocalDateTime.now());  </span><br><span class="line">    empMapper.insert(emp);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mapper层</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) &quot; +  </span></span><br><span class="line"><span class="meta">        &quot;values(#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure></li><li>HTTP请求<br><code>localhost:8080/emps</code><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://tlias.itheima.com/1.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;lingpingzhi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;林平之&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;entrydate&quot;</span><span class="punctuation">:</span><span class="string">&quot;2015-09-18&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deptId&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ul><li>前端<br>通过组件<code>&lt;input type=&quot;file&quot; name=&quot;image&quot;&gt;</code> 外部使用<code>&lt;form action=[路径] method=[请求方式] enctype=[编码格式]&gt;</code><br>其中<strong>编码格式</strong>使用默认值<code>application/x-www-form-urlencoded</code><strong>只会上传文件的文件名</strong>，使用<code>multipart/form-data</code>上传可以使表单数据<strong>分多个部分进行提交</strong><blockquote><p>这里进行一个测试：在resource&gt;static下创建<code>upload.html</code> </p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span>  </span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span>  </span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span>  </span><br><span class="line">    头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span>&gt;</span>  </span><br><span class="line">    上传：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li><li>后端<blockquote><p>Controller使用<code>MultipartFile image</code>接收图像数据 [[WEB开发-案例项目-附件#Controller接收参数名和前端不一致]]</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(String username, Integer age, MultipartFile image)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;文件上传：&#123;&#125;，&#123;&#125;，&#123;&#125;&quot;</span>, username, age, image);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>前后端联动<blockquote><p>网页端输入<code>localhost:8080/upload.html</code>，启动后端，前端输入数据并提交。<br>后端debugger模式下可以查看上传的文件名和本地存放目录<br>![[Pasted image 20230926012400.png|400]]<br>其中image&gt;part&gt;location指示了临时文件存放目录，更改其为对应的文件类型或者txt可以看到 上传的文件 username age的值</p></blockquote></li></ul><h6 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h6><ul><li>在本地指定文件目录进行存储<blockquote><p>HTTP请求使用<code>form-data</code>类型<code>localhost:8080/upload</code>，选择文件<br>完成后会在对应的文件路径下发现前端发送的文件</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;  </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(String username, Integer age, MultipartFile image)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;文件上传：&#123;&#125;，&#123;&#125;，&#123;&#125;&quot;</span>, username, age, image);  </span><br><span class="line">        <span class="comment">//将文件存储到服务器的磁盘目录中  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> image.getOriginalFilename();  </span><br><span class="line">        image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\MyWork\\SpringBoot_Learn\\img\\&quot;</span> + originalFilename));  </span><br><span class="line">        <span class="keyword">return</span> Result.success();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>本地存储<strong>优化</strong>——同名文件覆盖冲突<blockquote><p>如果向后端先后发送了两个不同的文件，但文件名相同。由于在同一个目录下，那么后上传的文件会覆盖掉先上传的文件<br><strong>通用唯一识别码(uuid)</strong>: 长度固定的字符串<br><code>aed2e87e-9229-4cae-b91f-845cdb7a0aec</code><br><code>31c49ad0-dccb-447c-ae65-52f61900c268</code><br><code>805ba17f-4897-4294-b94f-9f4373b4fd59</code><br><code>9e6a8e40-2072-458c-911e-1abbd3c4195d</code><br><code>afe1fe0a-7f81-461c-a998-7b4afe3d7d7d</code><br><code>8426bb6a-b60e-4cc5-9f1b-fff2f7d88278</code><br><strong>截取前端发送文件的后缀名，并拼接一个随机uuid</strong>。前后端联动后可以在指定本地文件路径下发现新的文件，且多次发送同一文件会有多份<br>&#x3D;&#x3D;有文件大小限制，后端默认不能接收超过1M的文件&#x3D;&#x3D; [[WEB开发-案例项目-附件#服务端接收的文件大小限制修改]]</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;  </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(String username, Integer age, MultipartFile image)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;文件上传：&#123;&#125;，&#123;&#125;，&#123;&#125;&quot;</span>, username, age, image);  </span><br><span class="line">        <span class="comment">//将文件存储到服务器的磁盘目录中  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> image.getOriginalFilename();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//截取原文件包含点在内的后缀名&quot;.jpg&quot;  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">extname</span> <span class="operator">=</span> originalFilename.substring(index);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//与uuid拼接得到新的文件名  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newfilename</span> <span class="operator">=</span> UUID.randomUUID().toString() + extname;  </span><br><span class="line">        log.info(<span class="string">&quot;新的文件名：&#123;&#125;&quot;</span>, newfilename);  </span><br><span class="line">  </span><br><span class="line">        image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\MyWork\\SpringBoot_Learn\\img\\&quot;</span> + newfilename));  </span><br><span class="line">        <span class="keyword">return</span> Result.success();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="云存储——阿里云OSS"><a href="#云存储——阿里云OSS" class="headerlink" title="云存储——阿里云OSS"></a>云存储——阿里云OSS</h6><blockquote><p>毫无疑问，本地存储是已经被淘汰了的方式。接下来介绍云存储相关，<br><strong>阿里云对象存储服务OSS</strong>(Object Storage Service)，</p></blockquote><ul><li>[[WEB开发-案例项目-附件#阿里云OSS的基础配置]]<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231001060406.png" alt="image.png"></li><li>开发文件上传接口[[计算机&#x2F;4-WEB开发&#x2F;$_attachments&#x2F;api接口文档#2.6 文件上传]]<blockquote><p>请求路径：&#x2F;upload<br>请求方式：POST<br>接口描述：上传图片接口<br>参数格式：multipart&#x2F;form-data</p></blockquote></li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>file</td><td>是</td><td></td><td></td></tr></tbody></table><ul><li>引入工具类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUtils</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-beijing.aliyuncs.com&quot;</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;yuring-tlias&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 实现上传图片到OSS  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="comment">// 获取上传的文件的输入流  </span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 避免文件覆盖  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//上传文件到 OSS        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);  </span></span><br><span class="line">        ossClient.putObject(bucketName, fileName, inputStream);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//文件访问路径  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;//&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;/&quot;</span> + fileName;  </span><br><span class="line">        <span class="comment">// 关闭ossClient  </span></span><br><span class="line">        ossClient.shutdown();  </span><br><span class="line">        <span class="keyword">return</span> url;<span class="comment">// 把上传到oss的路径返回  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>基于本地存储的代码进行修改<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> AliOSSUtils aliOSSUtils;  </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(MultipartFile image)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;文件上传，：&#123;&#125;&quot;</span>,image.getOriginalFilename());  </span><br><span class="line">        <span class="comment">//调用阿里云oss工具类进行文件上传  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> aliOSSUtils.upload(image);  </span><br><span class="line">        log.info(<span class="string">&quot;文件上传成功，url:&#123;&#125;&quot;</span>,url);  </span><br><span class="line">        <span class="keyword">return</span> Result.success(url);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动后前端上传的文件会由后端发送到云端，后端同时返回url地址，且url地址会随着emp中image保存到数据库中</li></ul><h4 id="修改员工"><a href="#修改员工" class="headerlink" title="修改员工"></a>修改员工</h4><ul><li>查询回显<blockquote><p>一般修改页面要求先展示一下原来的数据，方便用户针对性修改，所以需要先查询选择需要修改员工的信息。由于查询比较简单，mapper采用普通的Mybatis用法即可</p></blockquote></li><li>[[api接口文档#2.4 根据ID查询]]<blockquote><p>请求路径：&#x2F;emps&#x2F;{id}<br>请求方式：GET<br>接口描述：该接口用于根据主键ID查询员工的信息</p></blockquote></li><li>修改员工</li><li>[[api接口文档#2.5 修改员工]]<blockquote><p>请求路径：&#x2F;emps<br>请求方式：PUT<br>接口描述：该接口用于修改员工的数据信息</p></blockquote></li><li>思路<blockquote><p>controller层接收对象参数，service层补充基本数据如更新时间，Mapper层用动态sql实现。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Controller层</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/emps/&#123;id&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;  </span><br><span class="line">    log.info(<span class="string">&quot;根据ID查询员工信息，id&#123;&#125;&quot;</span>,id);  </span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> empService.getById(id);  </span><br><span class="line">    <span class="keyword">return</span> Result.success(emp);  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@PutMapping(&quot;/emps&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Emp emp)</span>&#123;  </span><br><span class="line">    log.info(<span class="string">&quot;更新员工信息：&#123;&#125;&quot;</span>,emp);  </span><br><span class="line">    empService.update(emp);  </span><br><span class="line">    <span class="keyword">return</span> Result.success();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service层</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> empMapper.getById(id);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span> &#123;  </span><br><span class="line">    emp.setUpdateTime(LocalDateTime.now());  </span><br><span class="line">    empMapper.update(emp);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mapper.java</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line">Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//动态sql映射</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  Mapper.xml  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--更新员工--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span>  </span><br><span class="line">    update emp  </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span>  </span><br><span class="line">            username = #&#123;username&#125;,  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span>  </span><br><span class="line">            password = #&#123;password&#125;,  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span>  </span><br><span class="line">            name = #&#123;name&#125;,  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span>  </span><br><span class="line">            gender = #&#123;gender&#125;,  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null and image != &#x27;&#x27;&quot;</span>&gt;</span>  </span><br><span class="line">            image = #&#123;image&#125;,  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span>  </span><br><span class="line">            job = #&#123;job&#125;,  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;entrydate != null&quot;</span>&gt;</span>  </span><br><span class="line">            entrydate = #&#123;entrydate&#125;,  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptId != null&quot;</span>&gt;</span>  </span><br><span class="line">            dept_id = #&#123;deptId&#125;,  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createTime != null&quot;</span>&gt;</span>  </span><br><span class="line">            create_time = #&#123;createTime&#125;,  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span>  </span><br><span class="line">            update_time = #&#123;updateTime&#125;  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span>  </span><br><span class="line">    where id = #&#123;id&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><blockquote><p>一些配置，如阿里云oss的accessKey如果直接分散定义在各个代码类中，后期修改时维护困难。<br>一般把这些信息配置在配置文件中，再由具体的代码类从中读取。</p></blockquote><ul><li>法一：通过<code>@Value</code>注入<blockquote><p>具体的类代码中，在需要注入的变量定义上注解<code>@Value(&amp;&#123;配置文件中的key&#125;)</code></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AliOSSUtils.java类中</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> String endpoint;  </span><br><span class="line"><span class="meta">@Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> String accessKeyId;  </span><br><span class="line"><span class="meta">@Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> String accessKeySecret;  </span><br><span class="line"><span class="meta">@Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> String bucketName;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">aliyun.oss.endpoint</span> = <span class="string">https://oss-cn-beijing.aliyuncs.com;  </span></span><br><span class="line"><span class="attr">aliyun.oss.accessKeyId</span> = <span class="string">?????;  </span></span><br><span class="line"><span class="attr">aliyun.oss.accessKeySecret</span> = <span class="string">??????????;  </span></span><br><span class="line"><span class="attr">aliyun.oss.bucketName</span> = <span class="string">yuring-tlias&quot;;</span></span><br></pre></td></tr></table></figure></li><li>debugger模式下观察运行机制<blockquote><p>后端debugger启动并在<code>InputStream inputStream = file.getInputStream();</code>打一个断点。<br>启动nginx通过<code>localhost:90</code>访问前端，添加一个图片。<br>后端断点提醒，显示当前变量已获取到配置文件的值。<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231019145814.png" alt="image.png|600"></p></blockquote></li><li><code>yml/yaml</code>类型配置文件<blockquote><p>springboot框架下同时也支持yml&#x2F;yaml.。<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231019151312.png" alt="image.png|400"></p></blockquote></li><li><code>yml/yaml</code>基本语法：<blockquote><p>大小写敏感<br>变量冒号后，数值前有空格<br>缩进表示层级关系，且不能使用Tab，必须使用空格<br>缩进空格数非严格，只需要同级的左对齐<br><code>#</code>表示行注释</p></blockquote></li><li><code>yml/yaml</code>数据格式：<blockquote><p>光标放在数据格式的对应元素上，idea下方会有光标显示相关信息</p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对象/Map集合：</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数组/List/Set集合</span></span><br><span class="line"><span class="attr">hobby:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">C</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">sport</span></span><br></pre></td></tr></table></figure></li><li><code>properties</code> 替换成 <code>yml</code> 格式<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="comment">#数据库连接配置  </span></span><br><span class="line">  <span class="attr">datasource:</span>  </span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>  </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/tlias</span>  </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span>  </span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span>  </span><br><span class="line">  <span class="comment">#文件上传配置  </span></span><br><span class="line">  <span class="attr">servlet:</span>  </span><br><span class="line">    <span class="attr">multipart:</span>  </span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span>  </span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">100MB</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#Mybatis配置  </span></span><br><span class="line"><span class="attr">mybatis:</span>  </span><br><span class="line">  <span class="attr">configuration:</span>  </span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  </span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#阿里云OSS  </span></span><br><span class="line"><span class="attr">aliyun:</span>  </span><br><span class="line">  <span class="attr">oss:</span>  </span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">https://oss-cn-beijing.aliyuncs.com;</span>  </span><br><span class="line">    <span class="attr">accessKeyId:</span> <span class="string">?????;</span>  </span><br><span class="line">    <span class="attr">accessKeySecret:</span> <span class="string">??????????;</span>  </span><br><span class="line">    <span class="attr">bucketName:</span> <span class="string">yuring-tlias&quot;;</span></span><br></pre></td></tr></table></figure></li><li>法二：通过<code>@ConfigurationProperties(prefix=&quot;aliyun.oss&quot;)</code><blockquote><p>先引入依赖必要的<br>定义一个新类，添加 <code>@Data @Component @ConfigurationProperties</code> 使得数据交由bean容器管理，并和配置文件中的对应节点域上映射</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSProperties</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String endpoint;  </span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;  </span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;  </span><br><span class="line">    <span class="keyword">private</span> String bucketName;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOSSProperties aliOSSProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> aliOSSProperties.getEndpoint();</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> aliOSSProperties.getAccessKeyId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> aliOSSProperties.getAccessKeySecret();</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> aliOSSProperties.getBucketName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对应配置元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>两个注解<code>@ConfigurationProperties</code>和<code>@Value</code>的比较<blockquote><p>同：都用来注入外部配置的属性<br>异：<code>@Value</code>只能一个一个的进行外部属性的注入；<code>@ConfigurationProperties</code>可以批量注入到bean对象中。</p></blockquote></li></ul><h2 id="基础登录"><a href="#基础登录" class="headerlink" title="基础登录"></a>基础登录</h2><h4 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h4><p>[[api接口文档#3.1.1 基本信息]]</p><blockquote><p>请求路径：&#x2F;login<br>请求方式：POST<br>接口描述：该接口用于员工登录Tlias智能学习辅助系统，登录完毕后，系统下发JWT令牌。 </p></blockquote><ul><li>实现思路<blockquote><p>LoginController: 接收并封装参数，调用service方法登录，响应<br>EmpService: 调用mapper<br>EmpMapper: <code>select * from emp username=? and password=?;</code></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LoginController.java</span></span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> EmpService empService;  </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Emp emp)</span>&#123;  </span><br><span class="line">        log.info(<span class="string">&quot;员工登录：&#123;&#125;&quot;</span>,emp);  </span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> empService.login(emp);  </span><br><span class="line">        <span class="keyword">return</span> emp1 != <span class="literal">null</span> ? Result.success() : Result.error(<span class="string">&quot;用户名或密码错误&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service层</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">login</span><span class="params">(Emp emp)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> empMapper.getByUsernameAndPassword(emp);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mapper层</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from emp where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span>  </span><br><span class="line">Emp <span class="title function_">getByUsernameAndPassword</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h4><blockquote><p>概述：虽然有了登陆界面来检验用户名是否正确并跳转到内部页面，但在网址上直接输入分页地址也可以直接获取后端数据，因此<strong>需要对退出或者未登录的请求访问进行用户校验</strong></p></blockquote><ul><li>统一拦截<blockquote><p>你也不想之前写的controller层代码全都得根据用户登陆没登陆做一次条件判断吧。为了简化重复繁琐的步骤，引入了一种统一拦截的技术。<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231025022221.png" alt="image.png|650"></p></blockquote></li></ul><h5 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h5><ul><li>概述<blockquote><p>会话：用户打开浏览器访问web服务器，建立一次会话，一方断开（如关闭浏览器）就结束会话。一次会话包含多次请求和响应。<br>会话跟踪：一种维护浏览器状态的方法，服务器一般需要识别多次请求是否来自同一浏览器，以便在同一次会话的多次请求间共享数据。<br>会话跟踪方案：[[WEB开发-案例项目-附件#会话跟踪技术方案对比]]</p><ol><li>客户端会话跟踪技术：<strong>Cookie</strong> </li><li>服务端会话跟踪技术：<strong>Session</strong> </li><li>令牌技术：<strong>JWT</strong><br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231025023320.png" alt="image.png|650"></li></ol></blockquote></li><li>令牌技术<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231025034820.png" alt="image.png|800"></li><li>JWT令牌<blockquote><p><strong>定义</strong>： <strong>JSON WEB TOKEN</strong>: 用于在通信双方以<strong>json数据格式</strong>安全的传输信息。数字签名的存在使得这些信息是<strong>可靠的</strong>。<br><strong>特点</strong>：<em>简洁、自包含</em>：JWT的实体就是json经由令牌封装后的<strong>字符串</strong>(Base64编码)，并且携带身份认证信息。<br><strong>运行机制</strong>：客户端第一次发送请求给服务端后，服务端<strong>生成JWT令牌</strong>并相应给客户端。客户端保存JWT且后续请求都会携带令牌，而服务端每次接受请求都会<strong>校验令牌</strong>再放行。<br><strong>组成</strong>：</p><ol><li>Header: 令牌类型、签名算法</li><li>Payload: 自定义信息、数据等</li><li>Signature: header+payload+指定密钥，并通过签名算法计算而得<br>引用场景：登陆认证（生成+校验）[[WEB开发-案例项目-附件#JWT令牌的生成与校验测试]]<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231025103113.png" alt="image.png"></li></ol></blockquote></li></ul><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><blockquote><p>引入依赖<br>JWT令牌操作工具类<br>登陆完成利用工具类生成令牌</p></blockquote><ul><li>引入jjwt依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>自定义Jwt工具类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signKey</span> <span class="operator">=</span> <span class="string">&quot;yuring&quot;</span>; <span class="comment">// 密钥  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Long</span> <span class="variable">expire</span> <span class="operator">=</span> <span class="number">43200000L</span>; <span class="comment">// 过期时间  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 生成JWT令牌  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims JWT的负载payload 中存储的内容  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回生成的令牌  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateJwt</span><span class="params">(Map&lt;String, Object&gt; claims)</span>&#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()  </span><br><span class="line">                .addClaims(claims) <span class="comment">// 添加自定义数据  </span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, signKey) <span class="comment">// 自设签名密钥算法  </span></span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expire)) <span class="comment">// 设置过期时间ms  </span></span><br><span class="line">                .compact(); <span class="comment">// 生成并返回jwt令牌   </span></span><br><span class="line"><span class="keyword">return</span> jwt;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 解析JWT令牌  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt 令牌  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回解析后 负载paylaod 中存储的自定义内容  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span>&#123;  </span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()  </span><br><span class="line">                .setSigningKey(signKey)  </span><br><span class="line">                .parseClaimsJws(jwt)  </span><br><span class="line">                .getBody();  </span><br><span class="line">        <span class="keyword">return</span> claims;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改Controller层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Emp emp)</span>&#123;  </span><br><span class="line">    log.info(<span class="string">&quot;员工登录：&#123;&#125;&quot;</span>,emp);  </span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> empService.login(emp);  </span><br><span class="line">    <span class="comment">// 登陆成功 生成令牌 下发令牌  </span></span><br><span class="line">    <span class="keyword">if</span>(emp1 != <span class="literal">null</span>)&#123;  </span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        claims.put(<span class="string">&quot;id&quot;</span>, emp1.getId());  </span><br><span class="line">        claims.put(<span class="string">&quot;name&quot;</span>, emp1.getName());  </span><br><span class="line">        claims.put(<span class="string">&quot;username&quot;</span>, emp1.getUsername());  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtils.generateJwt(claims);  </span><br><span class="line">        <span class="keyword">return</span> Result.success(jwt)  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 登陆失败 返回错误信息  </span></span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;用户名或密码错误&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>api调试工具或前端进行测试<blockquote><p>第一次请求得到的响应里会带有jwt<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231104181157.png" alt="image.png"><br>请求端后续发送请求会把jwt存放于请求头的token中<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231104180909.png" alt="image.png"></p></blockquote></li></ul><h5 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h5><ul><li>概述<blockquote><p>Filter过滤器， <strong>JavaWeb</strong> 三大组件之一。可以拦截对资源的请求，从而实现一些特殊的功能。<br>一般用于 登录校验、统一编码处理、敏感字符处理等<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231104181655.png" alt="image.png|650"></p></blockquote></li><li>基本思路<blockquote><p>在项目启动类上注解 <code>@ServletComponentScan</code><br>创建或继承一个Filter类，注解 <code>@WebFilter(urlPatterns = &quot;要拦截的路径&quot;)</code> , 实现 <code>init()</code>  <code>doFilter()</code>  <code>destopry()</code><br>处理<code>doFilter()</code>中的 <code>FilterChain.doFilter(request, response)</code>放行 的前后逻辑</p></blockquote></li><li>过滤器链<blockquote><p>如果有多个过滤器，会根据<strong>过滤器类名(字符串)的自然排序</strong>为顺序依次执行<strong>放行前逻辑</strong>、<strong>放行</strong>，访问到web资源后按栈反顺序执行<strong>放行后逻辑</strong>。<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231105015333.png" alt="image.png|700"></p></blockquote></li><li>具体操作<blockquote><p>FIlter首先拦截所有请求。<br>对于login路径请求，要放行查询数据库是否成功登录，并生成返回一个jwt令牌。<br>如果是对资源的请求，要校验jwt令牌，成功才给放行。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;  </span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;  </span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;  </span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//1. 获取请求的url  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURI().toString();  </span><br><span class="line">        log.info(<span class="string">&quot;请求的url：&#123;&#125;&quot;</span>, url);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2. 对登录请求，直接放行并生成jwt;  </span></span><br><span class="line">        <span class="keyword">if</span>(url.contains(<span class="string">&quot;login&quot;</span>))&#123;  </span><br><span class="line">            log.info(<span class="string">&quot;登陆操作，放行&quot;</span>);  </span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);  </span><br><span class="line">            <span class="keyword">return</span>;        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3. 对资源请求（非登录请求），校验请求头token中的jwt令牌  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasLength(jwt))&#123; <span class="comment">// 未登录情况  </span></span><br><span class="line">            log.info(<span class="string">&quot;请求头为空，返回未登录信息&quot;</span>);  </span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);  </span><br><span class="line">            <span class="comment">// 非Spring的Controller框架，直接返回Result并不会直接生成json 要手动转化  </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);  </span><br><span class="line">            response.getWriter().write(notLogin);  </span><br><span class="line">            <span class="keyword">return</span>;        &#125;  </span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// jwt解析失败情况  </span></span><br><span class="line">            JwtUtils.parseJWT(jwt);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            log.info(<span class="string">&quot;解析令牌失败，返回未登录错误信息&quot;</span>);  </span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);  </span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);  </span><br><span class="line">            response.getWriter().write(notLogin);  </span><br><span class="line">            <span class="keyword">return</span>;        &#125;  </span><br><span class="line">        log.info(<span class="string">&quot;令牌合法，放行&quot;</span>);  </span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;  </span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h5><ul><li>概述<blockquote><p>拦截器 Interceptor，<strong>Spring框架</strong>中提供的用来动态拦截控制器方法的执行。</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231105224148.png" alt="image.png|700"></p><ul><li>基本思路<blockquote><p>定义拦截器类继承HandlerInteceptor，<br>重写:<br><code>preHandler()</code>  目标资源方法执行前执行，返回结果表示是否放行<br><code>postHandler()</code>  目标资源方法运行之后运行<br><code>afterCompletion()</code>  视图渲染完毕后运行，最后运行<br>注册拦截器，继承WebMvcConfigurer，注解 <code>@Configuration</code>，注入定义的拦截器类，添加拦截路径<code>/**</code></p></blockquote></li><li>拦截资源<blockquote><p>相较于Filter，Interceptor用<code>addPathPatterns()</code>添加需要拦截的路径，同时支持排除不需要拦截的资源<code>excludePathPatterns()</code><br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231105231856.png" alt="image.png|900"></p></blockquote></li><li>执行流程<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231105235809.png" alt="image.png|800"><br>Filter过滤器会拦截所有的资源，Interceptor拦截器只能拦截Spring环境中的资源</li><li>具体操作<blockquote><p>自定义拦截器类并继承 <code>HandlerInterceptor</code> 处理逻辑和filter基本一致<br>注册拦截器</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="comment">//1. 获取请求的url  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURI().toString();  </span><br><span class="line">        log.info(<span class="string">&quot;请求的url：&#123;&#125;&quot;</span>, url);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2. 对登录请求，直接放行  </span></span><br><span class="line">        <span class="keyword">if</span>(url.contains(<span class="string">&quot;login&quot;</span>))&#123;  </span><br><span class="line">            log.info(<span class="string">&quot;登陆操作，放行&quot;</span>);  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3. 对资源请求（非登录请求），校验请求头token中的jwt令牌  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasLength(jwt))&#123; <span class="comment">// 未登录情况  </span></span><br><span class="line">            log.info(<span class="string">&quot;请求头为空，返回未登录信息&quot;</span>);  </span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);  </span><br><span class="line">            <span class="comment">// 非Spring的Controller框架，直接返回Result并不会直接生成json 要手动转化  </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);  </span><br><span class="line">            response.getWriter().write(notLogin);  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;        &#125;  </span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// jwt解析失败情况  </span></span><br><span class="line">            JwtUtils.parseJWT(jwt);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            log.info(<span class="string">&quot;解析令牌失败，返回未登录错误信息&quot;</span>);  </span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);  </span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);  </span><br><span class="line">            response.getWriter().write(notLogin);  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;        &#125;  </span><br><span class="line">        log.info(<span class="string">&quot;令牌合法，放行&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span>&#123;  </span><br><span class="line">        registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/login&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><blockquote><p>项目开发工程中各层不可避免的会遇到异常现象，但返回结果常常并非统一响应结果规范。（发生异常的层会不断向上层抛出异常，最终返回也是个异常）。<br>我们需要捕获这些异常，并返回统一规范结果的响应。</p></blockquote><ul><li>解决方案<blockquote><p>在Controller层进行try-catch处理，但每个controller调用都需要处理，比较繁琐。<br>一般使用<strong>全局异常处理器</strong>。<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231106013815.png" alt="image.png|500"></p></blockquote></li><li>全局异常处理器<blockquote><p>注解<code>@RestControllerAdvice</code> ( 包含<code>@ControllerAdvice</code>+<code>@ResponseBody</code><em>(返回值自动转为json)</em> ) 表明该类为全局异常处理器<br>注解<code>@ExceptionHandler(类)</code>为方法知名要捕获异常的类，类&#x3D;<code>Exception.class</code>表示捕获所有异常</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span>  </span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">ex</span><span class="params">(Exception ex)</span>&#123;  </span><br><span class="line">        ex.printStackTrace();  </span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;对不起，操作失败，请联系管理员&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li>概述<blockquote><p><strong>事务</strong>：一组操作的集合，不可分割的工作单位，这些操作要么同时成功，要么同时失败。</p></blockquote></li><li>场景说明<blockquote><p>以下图为例，先完善部门Service层删除的功能，即删除部门后同时删除该部门下的员工。<br>但如果中间发生错误，会删除部门但后续工作没有进行。即使代码改正过后原来的数据已经被删除而无法进行。<br>因此需要保证这两个操作在同一个事务中。<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231106185015.png" alt="image.png"></p></blockquote></li></ul><h4 id="Spring事务管理-Transactional"><a href="#Spring事务管理-Transactional" class="headerlink" title="Spring事务管理 @Transactional"></a>Spring事务管理 <code>@Transactional</code></h4><ul><li>基本用法<blockquote><p>事务管理 <code>@Transactional</code> 注解于业务层Service的方法、类、接口上。同时可以在yml配置文件上配置相关事务管理日志。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;  </span><br><span class="line">    deptMapper.deleteById(id); <span class="comment">// 根据ID删除部门数据  </span></span><br><span class="line">    <span class="comment">//此处为可能发生一定的错误的代码  </span></span><br><span class="line">    empMapper.deleteByDeptId(id); <span class="comment">// 根据部门ID删除部门下的员工信息  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring 事务管理日志  </span></span><br><span class="line"><span class="attr">logging:</span>  </span><br><span class="line">  <span class="attr">level:</span>  </span><br><span class="line">    <span class="attr">org.springframework.jdbc.support.JdbcTransactionManager:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></li><li>回滚属性rollbackFor<blockquote><p>默认情况下，只有出现<code>RuntimeException</code>才回滚异常，注解<code>@Transactional</code>的rollbackFor属性用于控制出现何种异常类型回滚事务。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span>  </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;  </span><br><span class="line">    deptMapper.deleteById(id); <span class="comment">// 根据ID删除部门数据  </span></span><br><span class="line">    <span class="comment">//此处为可能发生一定的错误的代码  </span></span><br><span class="line">    empMapper.deleteByDeptId(id); <span class="comment">// 根据部门ID删除部门下的员工信息  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>传播属性propagation<blockquote><p><strong>事务传播行为</strong>：一个事务方法被另一个事务方法调用时，因该进行何种事务控制<br>通过属性propagation来指定传播行为。<br>使用场景举例：如果说A方法需要处理删除功能添加了注解<code>@Transactional</code>，其中try-catch-final中调用了B方法写日志时同样注解了<code>@Transactional</code>。如果出现了异常，由于默认的属性因为A存在而把日志操作加入A的事务中，会导致A整个方法包括B方法写好的日志行为全部回滚。这里需要B方法在注解中定义传播属性 <code>@Transactional(propagation=REQUIRES_NEW)</code> ,原事务回滚前会挂机并创建新事务执行日志操作。<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231107004258.png" alt="image.png|800"></p></blockquote></li></ul><h2 id="面向切面编程AOP"><a href="#面向切面编程AOP" class="headerlink" title="面向切面编程AOP"></a>面向切面编程AOP</h2><h4 id="AOP基本操作"><a href="#AOP基本操作" class="headerlink" title="AOP基本操作"></a>AOP基本操作</h4><ul><li>概述<blockquote><p><strong>AOP</strong>：Aspect Oriented Programming(面向切面编程、面向方向编程)，面向特定若干个方法编程。<br>使用场景：项目中部分有些功能运行较慢，定位执行耗时时间较长的业务方法，此时就需要统计每一个业务方法的执行耗时。AOP通过一个模板提取统计耗时的操作。<br>实现：实现的主流方式时<strong>动态代理</strong>，而SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中，主要通过底层的动态代理机制，对特定的方法进行编程。</p></blockquote></li><li>SpringAOP基本用法<blockquote><p>导入依赖<br>编写AOP程序 定义类注解 <code>@Component</code> <code>@Aspect</code>，内部方法注解<code>@Around(&quot;execution(* com.yuring.service,*,*(..))&quot;)</code> execution(“包名.类&#x2F;接口名.方法”)</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--AOP--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// AOP类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAspect</span> &#123;  </span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.example.tlias.service.*.*(..))&quot;)</span> <span class="comment">// 切入点表达式  </span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;  </span><br><span class="line">        <span class="comment">// 1.记录考试时间  </span></span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 2.调用原始方法运行  </span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 3.记录结束时间，计算方法执行耗时  </span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();  </span><br><span class="line">        log.info(joinPoint.getSignature()+<span class="string">&quot;方法耗时时间：&#123;&#125;ms&quot;</span>,end-begin);  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231107115552.png" alt="image.png|1000"></li></ul><h4 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h4><h6 id="专业名词"><a href="#专业名词" class="headerlink" title="专业名词"></a>专业名词</h6><ul><li>连接点：JoinPoint，可以被AOP控制的方法。(暗含方法执行时的相关信息。)</li><li>通知：Advice，指那些重复的逻辑，也就是共性功能（最终体现为一个方法)</li><li>切入点：PointCut，匹配连接点的条件，通知金辉在切入点方法执行时被应用。</li><li>切面类：Aspect，描述通知与切入点的对应关系（通知+切入点）</li><li>目标对象：Target，通知所应用的对象。<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231107120517.png" alt="image.png|1000"></li></ul><h6 id="AOP执行流程"><a href="#AOP执行流程" class="headerlink" title="AOP执行流程"></a>AOP执行流程</h6><blockquote><p>首先，程序运行时，系统会基于动态代理自动的为目标对象创建一个代理对象，代理对象中会对目标对象的原始方法进行一定的”增强”。而原本要用目标对象注入的程序会<strong>用代理对象取代注入</strong>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231107120811.png" alt="image.png|1000"></p><h4 id="AOP进阶"><a href="#AOP进阶" class="headerlink" title="AOP进阶"></a>AOP进阶</h4><h6 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h6><ul><li><code>@Around</code> : 通过JoinPoint标注目标方法，进而确定目标方法前后要进行的操作</li><li><code>@Before</code> : 在所有目标方法前执行标注的方法</li><li><code>@After</code> : 在所有目标方法后执行标注的方法，且不受异常影响</li><li><code>@AfterReturing</code> : 在所有目标方法后执行，有异常就不执行</li><li><code>@AfterThrowing</code> : 在所有目标方法后执行，有异常才执行<br>切入点表达式简化：通知类型中一般都需要写<code>execution(* 类名.*(..))</code>，可以通过<code>@Pointcut</code>来简化这一操作<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Aspect</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect1</span> &#123;  </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.tlias.service.impl.DeptServiceImpl.*(..))&quot;)</span>  <span class="comment">// 抽取 切入点表达式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;before ...&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;around before ...&quot;</span>);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();  </span><br><span class="line">        log.info(<span class="string">&quot;around after ...&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@After(&quot;pt()&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;after ...&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h6><blockquote><p>当有多个切面的切入点都匹配到了目标方法，目标方法运行时，多个通知方法都会被执行。<br>通知顺序却决于切面类类名，before和after执行顺序类似于栈的关系<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231108003319.png" alt="image.png|600"><br>可以通过在切面类上注解<code>@Order(数字)</code> 来控制顺序，一个类的order数字越小，before顺序越靠前，after顺序越靠后。</p></blockquote><h6 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h6><blockquote><p>切入点表达式：描述切入点方法的一种表达式 <code>@Pointcut(...)</code><br>作用：主要用来决定项目中哪些方法需要加入通知<br>常见形式：<br><code>execution(...)</code> 根据方法的签名来匹配<br><code>@annotation(...)</code>  根据注解匹配</p></blockquote><ul><li><p><code>execution(...)</code> </p><blockquote><p>主要根据目标方法的返回值、包名、类名、方法名、方法等信息来匹配<br><code>execution(访问修饰符? 返回值 包名.类名.?方法名(方法参数) throws 异常?)</code><br><em>?表示可以省略，但包名类名一般不省略</em><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231108010219.png" alt="image.png|800"><br>通配符描述：&#x3D;&#x3D;（单个位置不是只有一个<code>*</code>的而是组合的，如  <code>*service</code> ，可以表示为以service结尾的所有参数)&#x3D;&#x3D;<img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231108010659.png" alt="image.png|900"><br>&#x3D;&#x3D;<em>如果要定位多个目标方法，还可以使用 <code>||</code> 进行连接</em>&#x3D;&#x3D;<img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231108011408.png" alt="image.png|800"></p></blockquote></li><li><p><code>@annotation(...)</code></p><blockquote><p>用于匹配表示有特定注解的方法<br>具体步骤：</p><ol><li>自定义一个注解描述，并注解 生效标识<code>@Retention(生效情况)</code> 可作用范围<code>@Target()</code></li><li>在目标方法上添加自己定义的注解</li><li>在切面类的切入点表达式方法的注解<code>@Pointcut(&quot;@Annotation(自定义注解全类名)&quot;)</code></li></ol></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLog&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h6><blockquote><p><strong>连接点</strong>：被AOP控制的方法。<br>在Spring中使用 <code>JoinPoint</code> 抽象了连接点，可以用JoinPoint来<strong>调用被控制方法的参数</strong>，如目标类名、方法名、方法参数等 还包括<strong>放行</strong>等操作。<br><strong>注意</strong>：<code>@Around</code> 通知获取连接点信息只能用<code>ProceedingJoinPoint</code> ，其他通知类型只能用 <code>JoinPoint</code>。 <code>JoinPoint</code>是<code>ProceedingJoinPoint</code>的父类型</p></blockquote><h4 id="AOP案例"><a href="#AOP案例" class="headerlink" title="AOP案例"></a>AOP案例</h4><h6 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h6><blockquote><p>需求：将案例中所有的crud相关接口的操作日志记录在数据库表中。日志信息包含：操作人、操作时间、执行方法的全类名、执行方法名、方法运行时的参数、返回值、方法执行时长。<br>思路分析：</p><ol><li>对所有Service层业务类的增删改查添加统一功能，使用AOP技术最为方便。<code>@Around</code> 环绕通知</li><li>也可以用自定义注解<code>@Annotation</code>对无明确命名规则的目标方法进行注解。</li></ol></blockquote><h6 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h6><ul><li>准备<blockquote><p>案例工程中引入AOP起步依赖<br>导入资料中准备好的数据库表结构，以及对应的实体类</p></blockquote></li><li>编码<blockquote><p>自定义注解<code>@Log</code><br>定义AOP切面类，完成记录操作日志的逻辑<br>在需要的方法上注解<code>@Log</code></p></blockquote></li></ul><h6 id="具体操作-4"><a href="#具体操作-4" class="headerlink" title="具体操作"></a>具体操作</h6><ul><li>引入依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--AOP--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>sql脚本导入数据库表<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 操作日志表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> operate_log(</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    operate_user <span class="type">int</span> unsigned comment <span class="string">&#x27;操作人ID&#x27;</span>,</span><br><span class="line">    operate_time datetime comment <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">    class_name <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;操作的类名&#x27;</span>,</span><br><span class="line">    method_name <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;操作的方法名&#x27;</span>,</span><br><span class="line">    method_params <span class="type">varchar</span>(<span class="number">1000</span>) comment <span class="string">&#x27;方法参数&#x27;</span>,</span><br><span class="line">    return_value <span class="type">varchar</span>(<span class="number">2000</span>) comment <span class="string">&#x27;返回值&#x27;</span>,</span><br><span class="line">    cost_time <span class="type">bigint</span> comment <span class="string">&#x27;方法执行耗时, 单位:ms&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;操作日志表&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>引入对应的实体类 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperateLog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id; <span class="comment">//ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer operateUser; <span class="comment">//操作人ID</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime operateTime; <span class="comment">//操作时间</span></span><br><span class="line">    <span class="keyword">private</span> String className; <span class="comment">//操作类名</span></span><br><span class="line">    <span class="keyword">private</span> String methodName; <span class="comment">//操作方法名</span></span><br><span class="line">    <span class="keyword">private</span> String methodParams; <span class="comment">//操作方法参数</span></span><br><span class="line">    <span class="keyword">private</span> String returnValue; <span class="comment">//操作方法返回值</span></span><br><span class="line">    <span class="keyword">private</span> Long costTime; <span class="comment">//操作耗时</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>添加支持日志添加操作的Mapper接口 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OperateLogMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入日志数据</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into operate_log (operate_user, operate_time, class_name, method_name, method_params, return_value, cost_time) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;values (#&#123;operateUser&#125;, #&#123;operateTime&#125;, #&#123;className&#125;, #&#123;methodName&#125;, #&#123;methodParams&#125;, #&#123;returnValue&#125;, #&#123;costTime&#125;);&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(OperateLog log)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>自定义注解，anno目录下定义 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 运行时生效  </span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">// 作用在方法上  </span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建切面类，aop目录下创建 <code>LogAspect</code> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 切面类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;<span class="comment">//获取改次请求的请求头信息  </span></span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> OperateLogMapper operateLogMapper;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(com.example.tlias.anno.Log)&quot;)</span> <span class="comment">// 切入点表达式-annotation形式  </span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123; <span class="comment">// 连接点  </span></span><br><span class="line">        <span class="comment">//操作人ID-当前登陆员工ID  </span></span><br><span class="line">        <span class="comment">// 获取请求头中的jwt令牌 解析令牌  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);  </span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtils.parseJWT(jwt);  </span><br><span class="line">        <span class="type">Integer</span> <span class="variable">operateUser</span> <span class="operator">=</span> (Integer) claims.get(<span class="string">&quot;id&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//操作时间  </span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">operateTime</span> <span class="operator">=</span> LocalDateTime.now();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//操作类名  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//操作方法名  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//操作方法参数  </span></span><br><span class="line">        Object[] args = joinPoint.getArgs();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">methodParams</span> <span class="operator">=</span> Arrays.toString(args);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();  </span><br><span class="line">        <span class="comment">// -- 调用目标方法 --        </span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();  </span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法返回值  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">returnValue</span> <span class="operator">=</span> JSONObject.toJSONString(result);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//操作耗时  </span></span><br><span class="line">        <span class="type">long</span> <span class="variable">costTime</span> <span class="operator">=</span> end - begin;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 记录操作日志  </span></span><br><span class="line">        <span class="type">OperateLog</span> <span class="variable">operateLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperateLog</span>(<span class="literal">null</span>, operateUser, operateTime, className, methodName, methodParams, returnValue, costTime);  </span><br><span class="line">        operateLogMapper.insert(operateLog);  </span><br><span class="line">        log.info(<span class="string">&quot;AOP记录操作日志: &#123;&#125;&quot;</span>, operateLog);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在目标方法上添加<code>@Log</code><blockquote><p>在所有的增删改的controller层方法上添加注解<code>@Log</code> ，使得每个增删改请求都会进行一次日志记录操作，可以在数据库中operate_log查询到。</p></blockquote></li></ul><h2 id="SpringBoot原理"><a href="#SpringBoot原理" class="headerlink" title="SpringBoot原理"></a>SpringBoot原理</h2><h4 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h4><ul><li>配置文件<blockquote><p><strong>配置文件优先级</strong> properties &gt; <strong>yml</strong> &gt; ymal<br>Springboot除了支持配置文件属性配置，同时还支持Java系统属性和命令行参数的方法进行属性配置。</p></blockquote></li><li>系统配置<blockquote><p>Java系统属性<br>命令行参数<br><strong>优先级</strong>：命令行参数 &gt; Java系统属性&gt;配置文件</p><ol><li>IDEA内配置<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231116145853.png" alt="image.png"></li><li>已打包项目进行配置属性的指定<br><code>java [option] -jar &lt;jar文件&gt; [args...]</code><br><code>java -Dserver.port=9000 -jar tlias-web-management-0.0.1-SNAPSHOT.jar --server.port=10010</code></li></ol></blockquote></li></ul><h4 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h4><h5 id="Bean的获取"><a href="#Bean的获取" class="headerlink" title="Bean的获取"></a>Bean的获取</h5><blockquote><p>默认情况下，Spring项目启动时，会把bean都创建好放在IOC容器中。</p></blockquote><ul><li>注入容器对象</li><li>获取bean<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>  </span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext; <span class="comment">// IOC容器对象  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetBean</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="comment">// 根据bean的名称获取  </span></span><br><span class="line">    <span class="type">DeptController</span> <span class="variable">bean1</span> <span class="operator">=</span> (DeptController) applicationContext.getBean(<span class="string">&quot;deptController&quot;</span>);  </span><br><span class="line">    System.out.println(bean1);  </span><br><span class="line">    <span class="comment">// 根据bean的类型获取  </span></span><br><span class="line">    <span class="type">DeptController</span> <span class="variable">bean2</span> <span class="operator">=</span> (DeptController) applicationContext.getBean(DeptController.class);  </span><br><span class="line">    System.out.println(bean2);  </span><br><span class="line">    <span class="comment">// 根据bean的 名称 及 类型 获取  </span></span><br><span class="line">    <span class="type">DeptController</span> <span class="variable">bean3</span> <span class="operator">=</span> (DeptController) applicationContext.getBean(<span class="string">&quot;deptController&quot;</span>, DeptController.class);  </span><br><span class="line">    System.out.println(bean3);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上述都是默认的单例非延迟加载的bean，实际还会受到作用域和延迟初始化影响。</li></ul><h5 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h5><ul><li><p>Spring支持五种作用域，后三种在web环境才会生效</p><table><thead><tr><th>作用域</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;singleton&#x3D;&#x3D;</td><td>容器内同名称的bean、只有一个实例(单例)（默认），容器启动时才被创建</td></tr><tr><td>&#x3D;&#x3D;prototype&#x3D;&#x3D;</td><td>每次使用该bean时都会创建新的实例(非单例)</td></tr><tr><td>request</td><td>每个请求范围内都会创建新的实例</td></tr><tr><td>session</td><td>每个会话范围内都会创建新的实例</td></tr><tr><td>application</td><td>每个应用范围内都会创建新的实例</td></tr></tbody></table></li><li><p>可以通过<code>@Scope</code>注解来进行配置作用域（Controller层的类上方）：</p></li><li><p>技巧：使用<code>@Lazy</code>注解可以延迟Controller实例的初始化，使得其在被第一次调用的时候才初始化</p></li><li><p>实际开发中，绝大部分的Bean都是单例的，即绝大多数Bean不需要配置scope属性</p></li></ul><h5 id="第三方bean"><a href="#第三方bean" class="headerlink" title="第三方bean"></a>第三方bean</h5><blockquote><p>如果要使用的bean对象来自第三方，那么<strong>每次调用都需要先创建一次该对象的实例</strong>，比较耗费资源。因此希望通过spring框架的IOC容器进行管理以减少资源消耗。</p></blockquote><p><strong>问题</strong>：但是在<strong>第三方只读类上无法进行<code>@Component</code>的注解</strong>，不可以直接用<code>@Component</code>或其衍生注解声明bean。<br><strong>解决方法</strong>：对于第三方的、无法用<code>@Component</code>进行注解声明bean的，可以通过<code>@Bean</code>注解，使其方法的返回值交给Spring的IOC容器管理。</p><blockquote><p>以xml的解析为例 首先pom.xml中添加<code>dom4j</code>相关依赖 resource中添加一个<code>1.xml</code>文件测试用</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">emp</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">emp</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为了方便演示在Springboot的启动类中要用到的第三方类上注解 <code>@Bean</code> ，使得项目启动时，该类的对象就被交给IOC对象管理</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootWebConfig2Application</span>&#123; <span class="comment">// 项目启动时 调用</span></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">// 将方法返回值交给IOC容器管理，成为IOC容器的Bean对象</span></span><br><span class="line"><span class="keyword">public</span> SAXReader <span class="title function_">saxReader</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在测试类中注入调用该方法</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>  </span><br><span class="line"><span class="keyword">private</span> SAXReader saxReader;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 第三方bean的管理  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testThirdBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(<span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;1.xml&quot;</span>));  </span><br><span class="line">    <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rootElement.element(<span class="string">&quot;name&quot;</span>).getText();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> rootElement.element(<span class="string">&quot;age&quot;</span>).getText();  </span><br><span class="line">  </span><br><span class="line">    System.out.println(name+ <span class="string">&quot;:&quot;</span> + age);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启动测试类，通过debug方式可以看出saxReader被交给IOC容器并注入到测试类中</p></blockquote><p><strong>注意：实际使用中IOC的操作并不在启动类中使用，而是在配置类中声明第三方bean对象</strong>: 项目下创建config目录 添加以下配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> &#123;  </span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//声明第三方bean对象 将当前方法的返回值对象交给IOC容器管理，成为IOC容器的bean  </span></span><br><span class="line">    <span class="keyword">public</span> SAXReader <span class="title function_">saxReader</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>@Component</code>及衍生注解 一般可以指定该类IOC后的bean名字，默认为类名首字母小写。而<code>@Bean</code>也可以通过<code>name</code> 和 <code>value</code>属性进行指定，<strong>未指定默认为方法名</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以通过该方法测试 通过bean名获取对象</span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetBean</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="comment">// 根据bean的名称获取  </span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean1</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;saxReader&quot;</span>);  </span><br><span class="line">    System.out.println(bean1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231128024720.png" alt="image.png|500"></p></li><li><p>在声明第三方bean对象时，如果<strong>还要注入自定义对象，无需<code>@Autowired</code> 直接在声明方法的形参中添加即可</strong> 容器会自动装配</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> &#123;  </span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//声明第三方bean对象 将当前方法的返回值对象交给IOC容器管理，成为IOC容器的bean  </span></span><br><span class="line">    <span class="keyword">public</span> SAXReader <span class="title function_">saxReader</span><span class="params">(DeptService deptService)</span>&#123;</span><br><span class="line">    System.out.println(deptService);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="SpringBoot原理-1"><a href="#SpringBoot原理-1" class="headerlink" title="SpringBoot原理"></a>SpringBoot原理</h4><h5 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h5><ul><li>springboot依赖的<code>spring-boot-starter-web</code>集成了spring相关的所有依赖（<strong>依赖传递</strong>）<br><img src="https://cdn.jsdelivr.net/gh/Yu-Ring/obsidian/20231128100649.png" alt="image.png|400"></li></ul><h5 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h5><ul><li>当Spring容器启动后，一些配置类<code>Configuration</code>、<code>bean</code>对象就自动存入到IOC容器中，不需要手动去声明，简化开发。</li><li>配置类<code>@Configuration</code>本身也是<code>@Component</code>注解的容器</li><li>哪些类要使用，只用通过<code>@Autowired</code>进行注入</li><li>Spring项目启动后，扫描的范围为该项目下及其子包<blockquote><p>方案一：<code>@ComponentScan(&#123;&quot;com.example&quot;,&quot;com.itheima&quot;&#125;)</code> <em>内部可以是String单值也可以是String数组</em> <strong>缺点：繁琐，所有第三方依赖都得一个一个写进去，大面积扫描性能低</strong><br>方案二：<code>@Import</code>导入<br>普通类：直接注解导入，无需添加其他注解，直接交给IOC容器管理，成为容器的bean对象 <code>@Import(&#123;TokenParser.class&#125;)</code><br>配置类：配置类被导入后，其中所含的所有bean对象也会一起交给IOC容器管理 <code>@Import(&#123;HeaderConfig.class&#125;)</code><br>接口实现类ImportSelector：用一个类MyImportSelector实现接口<code>ImportSelector</code>返回要交给IOC容器管理的<strong>全类名</strong>String数组<br>    (如<code>return new String[] &#123;&quot;com.example.HeaderConfig&#125;&quot;</code>)，然后再启动类上注解<code>@Import(&#123;&quot;MyImportSelector.class&quot;&#125;)</code> </p></blockquote></li></ul><p></p><h2 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h2><h2 id="Mybatis-Plus-相关"><a href="#Mybatis-Plus-相关" class="headerlink" title="Mybatis Plus 相关"></a>Mybatis Plus 相关</h2><ul><li>注意生成的实体层的每个主键对应的属性都需添加<code>@TableId(type = IdType.AUTO)</code><br>具体类似如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TableName</span> user  </span></span><br><span class="line"><span class="comment"> */</span><span class="meta">@TableName(value =&quot;user&quot;)</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;  </span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span>  </span><br><span class="line">    <span class="keyword">private</span> Long userId;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String account;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String avatar;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String email;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String phone;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Integer status;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Integer activityLevel;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 0:学生 1:老师  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> Integer role;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Integer deleted;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@TableField(exist = false)</span>  </span><br><span class="line">    <span class="keyword">private</span> String token;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(value =&quot;dish&quot;)</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;  </span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span>  </span><br><span class="line">    <span class="keyword">private</span> Long dishId;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Long cafeteriaId;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String cafeteriaName;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String cuisine;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String imageUrl;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Integer status;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Integer deleted;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java后端Web开发</title>
      <link href="/2023/03/22/%E5%90%8E%E7%AB%AFWeb%E5%BC%80%E5%8F%91/"/>
      <url>/2023/03/22/%E5%90%8E%E7%AB%AFWeb%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h4 id="Maven介绍"><a href="#Maven介绍" class="headerlink" title="Maven介绍"></a>Maven介绍</h4><blockquote><p><strong>Maven</strong>: 一款用于管理和构建java项目<strong>工具</strong>。基于项目对象模型POM(Project Object Model)，用一小段描述信息管理项目的构建。</p></blockquote><ul><li><strong>Maven作用</strong>：<blockquote><p>依赖管理：便于管理项目依赖的资源，避免版本冲突。<br>同一项目结构：使不同开发工具都可以处理同一的项目。<br>标准项目构建流程：跨操作平台的标准，指令自动化一键处理项目</p></blockquote></li><li><strong>Maven目录</strong><blockquote><p>bin:可执行文件，存放maven的指令<br>conf:maven的配置文件，修改本地仓库和私服<br>lib:maven依赖的资源jar包<br><strong>本地仓库配置</strong>：打开&#x2F;conf&#x2F;settings.xml <code>&lt;localRepository&gt;仓库位置&lt;/localRepository&gt;</code><br><strong>阿里云私服配置</strong>：打开&#x2F;conf&#x2F;settings.xml <code>mirrors节点</code><br><strong>配置环境变量</strong> 添加变量<code>MAVEM_HOME</code>：Maven本体路径；<code>MAVEM_HOME\bin</code>添加到Path;可通过<code>mvn-v</code>查看是否配置成功</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Maven使用"><a href="#Maven使用" class="headerlink" title="Maven使用"></a>Maven使用</h4><ul><li><strong>IDEA内Maven的配置</strong><blockquote><p>全局设置&gt;构建项目&gt;Maven&gt;仓库和配置信息绑定，运行程序版本修改</p></blockquote></li><li><strong>IDEA创建Maven项目</strong><blockquote><p><code>pom.xml</code>存放项目的信息<br><code>src.main</code>:java文件夹下编写java代码包，运行生成target为对应java的字节码文件；<br><code>src.test</code><br>Maven坐标:<br>groupId：当前项目隶属组织名称<br>artifactId：当前项目名称<br>version：当前项目版本号</p></blockquote></li><li><strong>导入Maven项目</strong><blockquote><p>法一：右侧工具栏&gt;Maven&gt;添加Maven项目&gt;需要添加项目的<code>pom.xml</code>文件。<br>法二：顶部菜单栏&gt;项目结构&gt;模块添加&gt;导入模块&gt;需要添加项目的<code>pom.xml</code>文件。<br>Idea中删除Maven项目与实际资源管理器内不同步。</p></blockquote></li><li><strong>Maven配置依赖</strong><blockquote><p><code>pom.xml</code>中编辑<code>&lt;dependencies&gt;</code>标签<br>添加<code>&lt;dependency&gt;</code>项 引入坐标<br>定义坐标<code>&lt;groupId&gt;&lt;artifactId&gt;&lt;version&gt;</code><br>刷新按钮<br>本地不存在的依赖下载：Maven仓库<a href="https://mvnrepository.com/">Maven Repository</a></p></blockquote></li><li><strong>Maven依赖传递</strong><blockquote><p>若A依赖某个jar包或者项目，则该jar包或项目的依赖同样传递给A<br>其中A依赖的包或者项目为<strong>直接依赖</strong>；直接依赖的后续一系列依赖为<strong>间接依赖</strong>。<br><code>pom.xml右键图表&gt;展示依赖</code><br><strong>排除依赖</strong>：可以通过<code>&lt;exclusions&gt;</code>标签排除不需要的已有依赖。<br>添加<code>&lt;exclusion&gt;</code>项 引入坐标<br>定义坐标<code>&lt;groupId&gt;&lt;artifactId&gt;</code></p></blockquote></li><li><strong>Maven依赖范围</strong><blockquote><p>默认jar包可以任意范围使用，<code>&lt;scope&gt;</code>可以设置作用范围</p></blockquote></li></ul><table><thead><tr><th>scope*(默认compile)*</th><th>主程序main文件夹内范围</th><th>测试程序test文件夹内范围</th><th>参与打包运行package指令范围</th><th>举例</th></tr></thead><tbody><tr><td><code>&lt;scope&gt;compile&lt;/scope&gt;</code></td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td><code>&lt;scope&gt;test&lt;/scope&gt;</code></td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td><code>&lt;scope&gt;provided&lt;/scope&gt;</code></td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td><code>&lt;scope&gt;runtime&lt;/scope&gt;</code></td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><h4 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h4><blockquote><p>clean:清理上一次项目构建的文件 <code>clean</code><br>default:核心工作，编译、测试、打包、安装、部署等 <code>compile</code> <code>test</code> <code>package</code> <code>install</code><br>site:生成报告、发布站点<br>一套生命周期中，运行后面的阶段同样会运行前面的阶段。<br><strong>执行生命周期</strong>：cmd or idea的maven工具栏生命周期插件</p></blockquote><h2 id="SpringBoot-Web"><a href="#SpringBoot-Web" class="headerlink" title="SpringBoot Web"></a>SpringBoot Web</h2><h4 id="Springboot介绍"><a href="#Springboot介绍" class="headerlink" title="Springboot介绍"></a>Springboot介绍</h4><blockquote><p>Spring框架；SpringBoot：用于快速构建Spring应用程序、简化开发、提高效率的工具。</p></blockquote><ul><li>Springboot流程<blockquote><p>IDEA创建springboot工程，勾选web spring相关依赖<br>定义HelloController类，添加方法hello，添加注解。(浏览器请求改方法时会运行该类)<br>运行测试(运行后本地产生8080端口号，本地浏览器可以通过改端口访问)</p></blockquote></li></ul><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><ul><li>HTTP请求数据格式<blockquote><p>请求行：请求数据的第一行（<em>请求方式 资源路径 协议</em>）<br>请求头：第二行开始（<em>格式key：value</em>）<br>请求体：仅POST，最后一行存放参数<br><em>GET请求无请求体，参数在请求行中，有大小限制；<br>POST请求参数在请求体中，无大小限制</em><br>![[Pasted image 20230812151103.png]]<br>![[Pasted image 20230812151013.png]]<br>![[Pasted image 20230812151025.png]]</p></blockquote></li><li>HTTP响应数据格式<blockquote><p>响应行：第一行（<em>协议、状态码、描述</em>）<br>响应头：第二行（<em>格式key：value</em>）<br>响应体：最后一行存放响应数据<br>![[Pasted image 20230812151548.png]]<br><strong>状态码</strong>：![[Pasted image 20230812151700.png]][[响应状态码|《常见的响应状态码》]]<br><strong>响应类型</strong><br>![[Pasted image 20230812153546.png]]</p></blockquote></li><li>HTTP解析<blockquote><p>客户端的浏览器内自带解析程序；而服务器端则需要自行解析。<br>服务器端通过ServerSocket进行网络编程，接收数据（字符串）；<br>Server.java:</p><ol><li>创建ServerSocket对象监听端口<code>ServerSocket ss = new ServerSocket(port:8080)</code></li><li>接收客户端请求<code>Socket sock = ss.request()</code></li><li>开启线程处理请求<code>Thread t = new Handler(sock); t.strat();</code></li></ol></blockquote></li></ul><h4 id="Web服务器——Tomcat"><a href="#Web服务器——Tomcat" class="headerlink" title="Web服务器——Tomcat"></a>Web服务器——Tomcat</h4><blockquote><p><strong>概念</strong>：Web服务器对HTTP协议操作进行封装。Tomcat是一个开源免费的轻量级Web服务器，支持Servlet JSP等少量JavaEE规范<br>JaveEE：Java企业版，是Java企业级卡法技术规范的综合，包含13项技术规范：<code>JDBC，JNDI，EJB，RMI，JSP，Servlet，XML，JMS，Java IDL，JTS，JavaMail，JAF</code><br>起步依赖有：<code>spring-boot-starter-web</code> <code>spring-boot-starter-test</code><br><strong>tomcat结构：</strong>![[Pasted image 20230812173615.png|300]]<br><code>/bin/xxx.bat</code>启动；<code>conf/logging.properties</code>控制中文译码防乱码，配置端口号<br>把项目放在comcat的webapps目录下即可部署。<br>IDEA创建的spring框架配有web相关依赖的项目中<strong>自带comcat</strong>的相关工具。只要运行<code>SpringbootWebQuickstart1Application</code>就会自动运行tomcat启用端口号</p></blockquote><h4 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h4><ul><li><p><strong>BS架构</strong>（浏览器-服务器架构）![[Pasted image 20230812220527.png]]</p></li><li><p><strong>请求数据</strong></p><blockquote><p>接口测试工具：由于前后端分离，浏览器只能发送GET请求不能发送POST或其他请求，需要一个工具用来测试各个请求调试后端。如postman，apipost，apifox。<br>接口测试工具<strong>模仿前端</strong>向后端发送请求，本地的后端可以接收请求。</p></blockquote></li><li><p>简单参数接收：</p><blockquote><p>只要保证请求参数名和形参名一样即可。<br>参数名和形参名不一致可以通过<code>@RequestParam(name=&quot;name&quot;)String username</code> 代替 <code>String name</code> <em>其中第一个name表示参数名的”名“</em><br>&#x3D;&#x3D;(@RequestParam中required默认true，如果不传递该参数会报错；如果该参数非必须传递，需要改为false)&#x3D;&#x3D;</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1 基于springboot接收  </span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String name, Integer age)</span>&#123;  </span><br><span class="line">    System.out.println(name+<span class="string">&quot;:&quot;</span>+age);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原始方式接收  </span></span><br><span class="line"><span class="comment">//    @RequestMapping(&quot;simpleParam&quot;)  </span></span><br><span class="line"><span class="comment">//    public String simpleParam(HttpServletRequest request)&#123;  </span></span><br><span class="line"><span class="comment">//        //获取请求参数  </span></span><br><span class="line"><span class="comment">//        String name = request.getParameter(&quot;name&quot;);  </span></span><br><span class="line"><span class="comment">//        String ageStr = request.getParameter(&quot;age&quot;);  </span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">//        int age = Integer.parseInt(ageStr);  </span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">//        System.out.println(name+&quot;:&quot;+age);  </span></span><br><span class="line"><span class="comment">//        return &quot;OK&quot;;  </span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>实体参数接收：用于解决url只能携带少量参数的问题</p><blockquote><p>把所有参数封装到一个实体类中，要求请求参名和形参名一致。<br><em>如果有一个参数var5在该实体类中的某个实体类A中，把A.var5作为请求参数</em></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2 实体参数  </span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;  </span><br><span class="line">    System.out.println(user);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//User类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Integer age;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> age;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.age = age;  </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +  </span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +  </span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组集合参数</p><blockquote><p>用于解决一个参数可能含多选的结果（即一个参数可能含多个值）<br>前端参数传递如 <code>网址?var1=valueA&amp;var1=valueB&amp;var1=valueC...</code><br>后端形参：<br><strong>数组接收</strong>：声明一个数组，要求数组名和多值请求参的名字一致<br><strong>集合接收</strong>：声明一个集合，要求集合名和请求参名一致，@RequestParam绑定参数关系</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3 数组集合参数  </span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span>  <span class="comment">//数组</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;  </span><br><span class="line">    System.out.println(Arrays.toString(hobby));  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span>  <span class="comment">//集合</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;  </span><br><span class="line">    System.out.println(hobby);<span class="comment">//直接打印出数组  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>日期时间参数</p><blockquote><p>后端形参通过<code>@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)LocalDateTime updateTime</code>注解定义updateTime</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4 日期类参数  </span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/DateParam&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">DateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;  </span><br><span class="line">    System.out.println(updateTime);<span class="comment">//直接打印出数组  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Json参数</p><blockquote><p>由于Json数据只能放在请求体中，必须用POST方式<br>前端json格式：<code>&#123;&quot;参数1&quot;:&quot;值&quot;, &quot;参数2&quot;: 数字,&quot;参数3&quot;:&#123;json对象&#125; ,... &#125;</code><br>后端形参：注解<code>@RequestBody 类 类名</code></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5 JSON参数  </span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;  </span><br><span class="line">    System.out.println(user);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>路径参数</p><blockquote><p>参数在url的一部分，前端表示为结尾直接<code>&quot;/&quot;+值</code> 如<code>localhost:8080/path/23</code><br>后端：<br>方法注解上<code>@RequestMapping(&quot;/path/&#123;形参名1&#125;&#123;形参名2&#125;&quot;)</code><br>形参加上注解<code>@PathVariable 类型 形参名1，@PathVariable 类型 形参名2</code></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//6 路径参数  </span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/path/&#123;形参名&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;  </span><br><span class="line">    System.out.println(id);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>响应数据</strong></p><blockquote><p>方法&#x2F;类注解<code>@ResponseBody</code>位于Controller方法\类上，指示该类的方法返回的结果将直接作为响应体（Response Body）返回给客户端。（其中实体对象&#x2F;集合返回值会转化为JSON格式进行响应。）<br><code>@RestController = @ResponseBody + @Controller</code><br>在项目中，接口量大，响应结果不统一，导致前端需要进行额外解析判断。需要<strong>统一返回数据的格式</strong>，使用<code>Result(code,msg,data)</code></p><ol><li>解析XML文件，引入dom4j依赖；</li><li>引入解析XML文件的工具类<code>XMLParserUtils</code>对应实体类Emp、XML文件emp.xml</li><li>引入前端的静态页面&gt;resources&gt;static目录</li><li>编写Controller程序</li></ol></blockquote></li></ul><h4 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h4><ul><li><strong>三层架构</strong><blockquote><p>对当前多个功能放在一个类中的进一步拆分与优化<br>单一职责原则：项目编写过程中，让每个接口负责的内容尽可能单一；即一个类&#x2F;方法只负责一个功能；便于后期维护。<br>![[Pasted image 20230814022403.png|800]]<br>Controller 控制层：负责接收前端发送的请求，<strong>对请求进行处理并响应数据</strong>。<br>Service 业务逻辑层：处理具体的<strong>业务逻辑</strong>。<br>Dao(Data Acess Object) 数据访问层：负责<strong>数据访问操作</strong>，如数据的增删改查。<br>![[Pasted image 20230814023420.png]]<br>![[Pasted image 20230814030438.png]]</p></blockquote></li><li><strong>分层解耦</strong><blockquote><p><strong>内聚</strong>：软件各个功能<strong>模块内部</strong>的功能联系<br><strong>耦合</strong>：衡量软件中各个<strong>层&#x2F;模块之间</strong>的依赖、关联程度<br>追求高内聚低耦合，防止修改一个模块会导致多个相关模块大改。<br><strong>控制反转</strong>：IOC(<code>Inversion Of Control</code>)。对象的创建控制权由程序自身转移到外部容器。<br><strong>依赖注入</strong>：DI(<code>Dependency Injection</code>)。容器为应用程序提供运行时所以来的资源。<br><strong>Bean</strong>：IOC容器的创建、管理的对象。</p></blockquote></li><li><strong>IOC&amp;DI基本流程</strong> <blockquote><p>controller - service - dao<br><em>解耦：删去所有实例创建对象代码部分</em><br>为实现类添加注解<code>Component</code>，将Service层和Dao层的实现类交给IOC容器管理。<br>为需要用到容器的层的实现类，添加注解<code>@Autowired</code>完成DI</p></blockquote></li><li><strong>IOC控制反转</strong><blockquote><p>在对应的层类上方注解可以将其交给IOC容器。<br><strong>bean四大注解</strong>：<code>@Component</code>注解的衍生，分别对应适用于controller - service - dao层的注解![[Pasted image 20230816170125.png|900]]<br>注解也可以都用通用的<code>Component</code>，其中的springboot集成web开发控制器必须<code>@Controller</code><br><strong>Bean的名字</strong>：默认为类名首字母小写；注解中命名<code>@Component(value=&quot;name1&quot;)</code><br><strong>Bean组件扫描</strong>：使bean的四个注解生效需要先用<em>组件扫描注解</em><code>ComponentScan</code>扫描。启动类会默认隐含该注解，且默认扫描范围为启动类所在包内。否则需要在启动类额外声明要扫描包外的注解：启动类上方<code>@ComponentScan(&#123;&quot;启动类外的包名&quot;,&quot;启动类所在包名&quot;&#125;)</code></p></blockquote></li><li><strong>DI依赖注入</strong><blockquote><p>在需要引用的其他层类对象定义上方注解，IOC容器会把对应类的bean注入赋值给定义的对象<br>IOC容器中<em>多个有相同对象类型的bean</em>：<br>法一：在需要的那个bean页面的类上方注解<code>@Primary</code><br>法二：在本注入页面的<code>@Autowired</code>下方注解<code>@Qualifier(&quot;bean类名小写&quot;)</code><br>法三：原本Autowired处替换为注解<code>@Resource(name=&quot;bean的名字&quot;)</code><br>区别：<br><code>@Autowired</code>是<strong>Spring框架</strong>提供的注解，默认按<strong>类型注入</strong><br><code>@Resource</code>是<strong>JDK</strong>提供的注解，默认按<strong>名称注入</strong></p></blockquote></li></ul><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h4 id="MySQL流程位置"><a href="#MySQL流程位置" class="headerlink" title="MySQL流程位置"></a>MySQL流程位置</h4><p>数据库将在处理流程中的emp.xml位置工作![[Pasted image 20230817015055.png|600]]<br><strong>数据库管理系统DBMS</strong>：操纵和管理数据库的大型软件。如MySQL、SQL Server、Oracle等<br><strong>结构化查询语言SQL</strong>：操作关系型数据库的编程语言，定义一套操作关系型数据库统一标准。</p><ul><li>下载mysql并配置环境变量，创建数据库账户密码</li><li>下载vmware，来模拟数据库在服务器上的表现</li></ul><h4 id="MySQL概述"><a href="#MySQL概述" class="headerlink" title="MySQL概述"></a>MySQL概述</h4><ul><li><strong>关系型数据库RDBMS</strong><blockquote><p>建立在关系模型基础上，<strong>多张相互连接的二维表</strong>组成的数据库。<br>表存储，格式统一，便于维护；<br>SQL语言操作，统一标准，可用于复杂查询![[Pasted image 20230817162505.png|400]]</p></blockquote></li><li><strong>数据模型</strong>：![[Pasted image 20230817162602.png|700]] <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">----初始化----</span><br><span class="line">C:\Windows\system32&gt;mysqld --initialize-insecure</span><br><span class="line"></span><br><span class="line">----安装mysql服务----</span><br><span class="line">C:\Windows\system32&gt;mysqld -install</span><br><span class="line">Service successfully installed.</span><br><span class="line"></span><br><span class="line">----启动mysql服务----</span><br><span class="line">C:\Windows\system32&gt;net start mysql</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br><span class="line"></span><br><span class="line">----创建管理员账号----</span><br><span class="line">C:\Windows\system32&gt;mysqladmin -u root password 1234</span><br><span class="line">mysqladmin: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Warning: Since password will be sent to server <span class="keyword">in</span> plain text, use ssl connection to ensure password safety.</span><br><span class="line"></span><br><span class="line">----登录管理员账号----</span><br><span class="line">C:\Windows\system32&gt;mysql -uroot -p1234</span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 9</span><br><span class="line">Server version: 8.0.34 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">----创建数据库----</span><br><span class="line">mysql&gt; create database db01;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure></li><li><strong>SQL</strong><blockquote><p>操作关系型数据库的编程语言，定义操作所有关系性数据库的统一标准。![[Pasted image 20230817163335.png|700]]<br>SQL分类：![[Pasted image 20230817163547.png|700]]</p></blockquote></li></ul><h4 id="数据库定义语言DDL"><a href="#数据库定义语言DDL" class="headerlink" title="数据库定义语言DDL"></a>数据库定义语言DDL</h4><blockquote><p>面向数据库对象的语言，包括<strong>数据库</strong>、<strong>表</strong>、<strong>字段</strong></p></blockquote><ul><li><strong>数据库操作</strong><blockquote><p>![[Pasted image 20230817164421.png|700]]<br><em>上述的database可以替换成schema</em></p></blockquote></li><li><strong>表操作</strong><blockquote><p>![[Pasted image 20230817213455.png|450]]![[Pasted image 20230817214026.png|800]]![[Pasted image 20230817213439.png|500]]</p></blockquote></li></ul><ol><li>创建表结构<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(  </span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID, 唯一标识&#x27;</span>,  </span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,  </span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,  </span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,  </span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span> comment <span class="string">&#x27;性别&#x27;</span>  </span><br><span class="line">) comment <span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>点击目录中的表<code>tb_user</code>并添加每个字段的值。<em>主键字段的数据可以通过auto_increment关键字自增</em></li></ol><ul><li><p><strong>MySQL图形化管理工具——实现表、字段的简单操作</strong></p><blockquote><p>![[Pasted image 20230817165329.png|300]]<br>DataGrip自动集成在IDEA中了，右侧菜单栏数据库。</p></blockquote></li><li><p><strong>数据类型</strong></p><blockquote><p>数值类型：![[Pasted image 20230817232043.png|1000]]<br>字符串类型：&#x3D;&#x3D;char：性能高，费空间；varchar：性能低，省空间&#x3D;&#x3D; ![[Pasted image 20230817232131.png|600]]<br>日期时间类型：![[Pasted image 20230817232357.png|900]]</p></blockquote></li><li><p><strong>表查询、修改、删除</strong></p><blockquote><p>查询：<br>查询当前数据库的所有表：<code>show tables;</code><br>查询表结构：<code>desc 表名；</code><br>查询建表语句：<code>show create table 表名；</code><br>修改:<br>添加字段：<code>alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];</code><br>修改字段类型：<code>alter table 表名 modify 原字段名 新数据类型(长度)</code><br>修改字段名和字段类型：<code>alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</code><br>删除字段：<code>alter table 表名 drop column 字段名;</code><br>修改<strong>表名</strong>：<code>rename table 旧表名 to 新表名;</code><br>删除:<br>删除表: <code>drop table [if exists] 表名;</code><br><strong>以上用法都不推荐，可以直接用图形化管理系统实现</strong></p></blockquote></li></ul><h4 id="数据库操作语言DML"><a href="#数据库操作语言DML" class="headerlink" title="数据库操作语言DML"></a>数据库操作语言DML</h4><blockquote><p>面向数据内容的语言，对表中的具体数据增删改</p></blockquote><ul><li>insert 增<br>![[Pasted image 20230818000701.png|700]]<blockquote><p>无默认值的字段必须进行数据赋值。<em>now()表示time类型的现在时间</em></p></blockquote></li><li>update 改<br>![[Pasted image 20230819000118.png|700]]</li><li>delete 删<br>![[Pasted image 20230819000431.png|700]]</li></ul><h4 id="数据库查询语言DQL"><a href="#数据库查询语言DQL" class="headerlink" title="数据库查询语言DQL"></a>数据库查询语言DQL</h4><blockquote><p>用于查询数据库中表的记录<br>![[Pasted image 20230819000802.png|600]]</p></blockquote><h5 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h5><blockquote><p><strong>控制各个字段的显示</strong><br>![[Pasted image 20230819001038.png|700]]</p></blockquote><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><blockquote><p><strong>控制查询的范围</strong><br>![[Pasted image 20230819001535.png|700]]<br>![[Pasted image 20230819001559.png|1000]]</p></blockquote><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><blockquote><p><strong>某个字段值相同的为一组，对查询后的表进行二次分组(并对二次分组后的表过滤)</strong><br>聚合函数：将一列数据作为一个整体，进行纵向计算。<br><em>null值不参与聚合函数的计算</em> 字段列表可以用<code>*</code>代替所有字段<br>![[Pasted image 20230819002430.png|1000]]<br>上述语法实现计算某个字段的数据并返回值。<br>![[Pasted image 20230819002918.png|800]]</p></blockquote><blockquote><p>上述语法实现按分组字段返回数据，其中分组查询select的<strong>字段列表部分</strong>（即返回数据）只能 填写<strong>聚合函数</strong>和<strong>分组字段名</strong><br><em>e.g 一个29人的员工信息 <code>select gender,count(*) from tb_emp group by gender</code> 结果为 <code>男 24；女 5</code>，按性别分组</em><br>其中<strong>having</strong>是对分组查询前面部分返回的数据进行<strong>第二次过滤</strong>且<strong>可以使用聚合函数</strong>，where是对分组前过滤不能对聚合函数进行判断<br><em>e.g <code>select gender,count(*) from tb_emp group by gender having count(*）&gt;6</code> 结果为 <code>男 24</code></em> </p></blockquote><h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><blockquote><p><strong>二次分组(且过滤)后的结果进行升序或降序显示</strong><br>![[Pasted image 20230819004437.png]]<br>![[Pasted image 20230819004510.png|700]]<br>e.g <code>select * from tb_emp order by entrydate asc</code> 对员工按入职时间升序排序，显示所有字段。<br><em>如果order by后有多个字段，只有第一个字段值相同时，第二个字段值的排序才会生效（第一个字段值优先级更高）</em></p></blockquote><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><blockquote><p>从y索引按每x条数据进行展示<br>*其中起始页数p可以通过 y&#x3D;(p-1)x表示 *<br>![[Pasted image 20230819005530.png|700]]<br>![[Pasted image 20230819010103.png|400]]</p></blockquote><ul><li>具体应用场景<br>[[sql-dql引用场景]]</li></ul><h5 id="多表设计"><a href="#多表设计" class="headerlink" title="多表设计"></a>多表设计</h5><blockquote><p>外键约束：可以使用图形化界面，把对应的字段和外部表的特定字段进行关联![[Pasted image 20230819230556.png|700]]<br><em>其中外键字段名可以自定义</em><br>一对多![[Pasted image 20230819232452.png|700]] 多对多![[Pasted image 20230819232513.png|700]] 一对一![[Pasted image 20230819232538.png|700]]<br>缺点：<br>表的修改效率低，表内字段进行增删改时需要考虑外键关系<br>仅用于单节点数据库，不适用于分布式、集群场景<br>会产生数据库的思索问题<br><strong>逻辑外键</strong></p></blockquote><h5 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h5><blockquote><p>多表查询就是指一次性从多张表中查询数据。<br>原来我们查询单表数据，执行的SQL形式为： <code>select 字段列表 from 表名</code>;<br>现在我们想要执行多表查询，就只需要使用逗号分隔多张表即可，如： <code>select 字段列表 from 表名1, 表名2</code>;<br><em>但是我们这样使用却发现存在问题：的确同时查到了多张表的数据，但是数据形式和我们想要的并不一样,它排列组合了两张表中的所有数据项！</em>——<strong>笛卡尔积</strong><br>![[Pasted image 20230820004613.png|500]]<br>因此，在多表查询中，我们需要根据业务情况进行连接查询，<strong>消除无效的笛卡尔积</strong>，只保留两张表关联部分的有效数据。<br>例如在上述示例，我们通过 <code>表名.字段名</code> 指定员工表的外键等于部门表的主键即可获得预期数据![[Pasted image 20230820004711.png]]<br>我们不光可以为字段起别名，同样可以使用相同的语法给表起别名， <code>table as 别名或table 别名</code><br>一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段<br>在获取表字段时，我们可以使用 表名.字段名 来进行指定。</p><p><strong>内连接</strong>：查询两个表互有联系的数据，无联系的不显示![[Pasted image 20230820010114.png|500]]<br>隐式内连接：<code>SELECT 字段列表 FROM 表1,表2 WHERE 限制条件;</code><br>    <code>select e.name,d.name from emp e,dept d where e.dept_id = d.id;</code><br>显式内连接：<code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ... ;</code><br>    <code>select e.name, d.name from emp e inner join dept d on e.dept_id = d.id;</code><br><em>起别名 select 表别名1.字段1，表别名2.字段3 from 表1 表别名1，表2 表别名2 where …</em><br><strong>外连接</strong>：查询一个表：与另一个表建立联系的数据 + 本表内未建立联系的数据NULL![[Pasted image 20230820010133.png|500]]<br><strong>左外连接</strong>：<code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ... ;</code> 查询左表中与右表建立联系的数据，未建立联系的数据显示未NULL<br>右外连接：<code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ... ;</code><br><strong>子查询</strong>：对查询结果嵌套查询<br><code>SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);</code> <em>其中“&#x3D;”也可以换成＞＜等逻辑判断符号</em><br>标量子查询（子查询结果为单个值）<em>常用操作符 &#x3D;, !&#x3D;, &gt;, &lt;等</em><br>列子查询 (子查询结果为一列) <em>常用操作符 in, not in</em><br>行子查询 (子查询结果为一行) <em>常用操作符 &#x3D;, !&#x3D;, in, not in</em><br>表子查询 (子查询结果为多行多列)</p></blockquote><h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><blockquote><p><strong>事务</strong>：指的是一组操作的集合，它是一个不可分割的工作单位，它会把这个集合中所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。<br><em>比如银行间多个账户间转账，只有转账方有足够钱才会使得双方金额都变化，而并非余额不足时收钱方数据仍增加</em></p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line"><span class="keyword">start</span> transaction; 或 <span class="keyword">begin</span>;</span><br><span class="line"></span><br><span class="line">#提交事务</span><br><span class="line"><span class="keyword">commit</span>；</span><br><span class="line"></span><br><span class="line">#回滚事务</span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><blockquote><p><em>表格窗口展示的是经由系统处理过后的表，即有事务概念的</em>；<br><em>控制台窗口调用select查表语句是按照已执行语句处理的表，是尚未提交的，即无事务概念的</em><br><code>“开启事务”</code>后后续的执行操作不会立即提交给系统，而是在后续操作都成功情况下<code>“提交事务”</code>完成后提交；如果一系列执行语句中有一个发生错误，虽然并没有给到系统，但该错误前面的语句本质还是运行了，需要<code>“回滚事务”</code>回到最开始。</p></blockquote><ul><li><strong>四大特性</strong>（ACID）<blockquote><p>原子性atomicity：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。<br>一致性consistency：事务完成时，必须使所有的数据都保持一致状态。<br>隔离性isolation：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。<br>持久性duration：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</p></blockquote></li></ul><h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><blockquote><p><strong>索引(index)</strong>:是帮助MySQL高效获取数据的数据结构(有序)。数据库除了存储数据之外，还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 当我们在查找数据的时候，就可以在这些数据结构上实现高级查找算法，快速查找到我们想要的数据，这种数据结构就是索引。<br><strong>为表的某个字段的数据创建索引</strong>：<code>create index 索引名 on 表名(字段名,...,...)</code><br><strong>查看当前表的所有索引信息</strong>：<code>show index from 表名</code> <em>主键会自带一个索引</em><br><strong>删除表的某个索引</strong>：<code>drop index 索引名 on 表名</code></p></blockquote><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>提高<strong>数据检索</strong>的效率，降低数据库的IO成本</td><td>索引列也是要<strong>占用空间</strong>的</td></tr><tr><td>通过索引列对数据进行排序，降低<strong>数据排序</strong>的成本，降低CPU的消耗。</td><td>索引大大提高了查询效率，同时却也<strong>降低更新表的速度</strong>， 如对表进行INSERT、UPDATE、DELETE时，效率降低。</td></tr></tbody></table><ul><li>索引结构：<blockquote><p><strong>B+Tree 索引</strong>：最常用的索引类型，大部分引擎都支持 B+ 树索引 (<em>B+数：整体树形结构，节点内为顺序表</em>)<br><strong>Hash 索引</strong>：底层数据结构是用哈希表实现的, 只有精确匹配索引列的查询才有效, 不支持范围查询，也无法利用索引完成排序，但是查询效率较高。<br>**R-tree (空间索引)**：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类 型，通常使用较少<br>**Full-text (全文索引)**：是一种通过建立倒排索引,快速匹配文档的方式。类似Lucene,Solr,ES</p></blockquote></li></ul><h4 id="数据库控制语言DCL"><a href="#数据库控制语言DCL" class="headerlink" title="数据库控制语言DCL"></a>数据库控制语言DCL</h4><blockquote><p>创建数据库用户以及控制这些用户的访问权限</p></blockquote><h2 id="SpringBoot-Mybatis"><a href="#SpringBoot-Mybatis" class="headerlink" title="SpringBoot Mybatis"></a>SpringBoot Mybatis</h2><h4 id="Mybatis介绍"><a href="#Mybatis介绍" class="headerlink" title="Mybatis介绍"></a>Mybatis介绍</h4><blockquote><p>Mybatis是一款<strong>持久层</strong>DAO的框架，用于简化JDBC的开发。springboot内一般直接集成了mybatis<br>![[Pasted image 20230822014957.png|500]]</p></blockquote><ul><li>JDBC介绍<blockquote><p>Java DataBase Connnectivity，使用Java语言操作关系型数据库的一套API。<br>其中Java的sun公司负责定义接口；而接口的具体实现由连接的数据库提供的驱动实现。<br>步骤：（无需掌握）</p><ol><li>注册驱动</li><li>获取连接对象</li><li>获取执行SQL的对象Statement，执行SQL，返回结果</li><li>封装结果数据</li><li>释放资源<br>直接JDBC劣势：“硬编码“、封装结果繁琐、资源浪费<br>Mybatis则简化了以上操作，通过<strong>数据库连接池</strong>优化劣势。</li></ol></blockquote></li></ul><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ul><li><strong>使用Mybatis查询所有用户数据</strong><blockquote><p>普通SQL图形化操作逻辑：图形化界面中编写sql语句，发送给数据库执行，数据库把结果返回给图形化界面<br><strong>Mybatis逻辑</strong>：java中编写sql语句，发送给数据库执行，数据库把结果返回给java程序<br><strong>Mapper层</strong>：Spring中的Dao持久层，主要负责与数据库进行联络和封装，实现java中编写sql语句<br>步骤：</p><ol><li>创建springboot项目、<strong>数据库表user</strong>、<strong>实体类User</strong>(封装用户信息、保证表的字段和类属性名一致)<ol><li>项目创建时，选择maven和sql，依赖勾选sql下的MybatisFramework和MysqlDriver(<em>idea创建完成</em>)</li><li>创建数据库表user(<em>mysql图形化工具内完成</em>)</li><li><code>src/main/Java/com.yuring/pojo/</code>目录下参照<strong>user表</strong>的字段信息编写<strong>实体类Use</strong>r(包装类型)</li></ol></li><li>引入Mybatis相关依赖并配置Mybatis(数据库连结信息) <code>application.properties</code><ol><li><code>src/main/resource/</code>目录下application.properties配置如图信息</li></ol></li><li>编写SQL语句(注解&#x2F;XML) <code>@Mapper</code><br> 1.<code> src/main/Java/com.yuring/mapper/</code>目录下创建<strong>接口UserMapper</strong>，添加mapper注解(<em>运行时自动生成该接口的实现类对象并交给IOC容器管理</em>)<ol start="2"><li>注解sql语句<code>@Select(select * from user)</code>定义一个User的<strong>集合对象list</strong><code>public List&lt;User&gt; list();</code><br>![[Pasted image 20230825173659.png|left]]</li></ol></li><li>test文件下进行测试，测试文件自动有一个<code>@SpringBootTest</code>注解的测试类<ol><li>定义一个单元测试方法<code>public void testListUser()</code>并注解<code>@Test</code></li><li>由于UserMapper接口已交给IOC的bean，测试方法前面声明UserMapper类型对象userMapper，注解<code>@Autowired</code>完成注入</li><li>调用集合方法<code>Object.list()</code>获取userMapper对象的信息 <code>List&lt;User&gt; userList = userMapper.list();</code></li><li>用stream流方法遍历输出<code>userList.stream().forEach(user-&gt;&#123;sout(user);&#125;)</code><br>![[Pasted image 20230823020508.png|1000]]</li></ol></li></ol></blockquote></li><li>技巧 <em>配置sql语句提示</em><blockquote><p>选中java程序中注解的sql文件，右键show context actions - inject language or reference - mysql<br>只有idea连接数据库的情况下，表名的提示词才会出现</p></blockquote></li><li><strong>数据库连接池</strong><blockquote><p><strong>数据库连接池</strong>：负责分配、管理数据库连接的一个容器。<br><strong>特点</strong>：<br>1.允许应用程序重复使用一个现有的数据库连接，而不是在建立一个，避免浪费。<br>2.释放空间时间超过最大允许空闲时间的连接，避免连接释放的遗漏。<br>![[Pasted image 20230823180022.png|400]]<br><strong>连接池运行机理</strong>：程序启动阶段，连接池中建立几个可用连接。sql执行时会调用其中一个”连接“，执行完毕立刻放回连接池；客户端与数据库连接时占用一个”连接“，超时释放。<br><em>配置例子：sun提供了一个DataSource的接口，由第三方组织实现此接口。常见的第三方有：Druid、Hikari(Springboot自带)。</em><br><strong>切换数据库连接池</strong>：在<code>pom.xml</code>文件中添加依赖；在<code>application.properties</code>添加配置![[Pasted image 20230823214448.png|700]]</p></blockquote></li><li>技巧 <em>Lombok</em><blockquote><p>在写User实体类时，需要定义元素+重写gettersetter方法+重写tostring方法，操作麻烦。<br><strong>Lombok</strong>：一个实用的Java类库，通过注解的形式自动生成构造器、getter,setter,equals,hashcode,toString等方法并自动化生成日志变量，简化java开发，提高效率。![[Pasted image 20230823215018.png|600]]<br><strong>导入依赖</strong>：<code>pom.xml</code>中写入![[Pasted image 20230823215216.png|400]]<br><strong>简化实体类代码</strong>：在对应的实体类上方添加对应注解即可。原理：程序编译时，会根据注解为类自动生成对应的方法。</p></blockquote></li></ul><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><h5 id="环境准备-Dao层处理"><a href="#环境准备-Dao层处理" class="headerlink" title="环境准备(Dao层处理)"></a>环境准备(Dao层处理)</h5><blockquote><p><strong>准备数据库表emp</strong><br><strong>创建springboot工程</strong>，选择引入的起步依赖。mybatis framework、mysql driver、lombok<br>application.properties中<strong>引入数据库连接信息</strong><br><strong>创建实体类Emp</strong><br><strong>准备Mapper接口EmpMapper</strong></p></blockquote><h5 id="预编译机理"><a href="#预编译机理" class="headerlink" title="预编译机理"></a>预编译机理</h5><blockquote><p>预编译机制相较于普通方法，性能更高，安全性更好。</p></blockquote><p>我们通过在<code>application.properties</code>中添加语句<code>mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</code>可以获取日志信息。<br>日志信息获取示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JDBC Connection [HikariProxyConnection@652803980 wrapping com.mysql.cj.jdbc.ConnectionImpl@5aa76ad2] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: delete from emp where id = ?</span><br><span class="line">==&gt; Parameters: 17(Integer)</span><br><span class="line">&lt;==    Updates: 0</span><br></pre></td></tr></table></figure><blockquote><p>可以看到日志中第2行有个 <code>?</code> ，表示<code>#&#123;id&#125;</code>的参数占位符，随后会用3行的参数<code>Parameters</code>进行替代。</p></blockquote><ol><li>Java-SQL流程![[Pasted image 20230827160607.png]]<blockquote><p>其中预编译部分（绿色），相较于普通方法，分离了sql语句和参数，就不需要过多的缓存步骤，<strong>性能更高</strong>；</p></blockquote></li><li>SQL注入演示![[Pasted image 20230827161451.png]]<blockquote><p>其中普通方法输入的数据直接拼接会导致字符转义，语句永远正确；而SQL预编译参数占位符<code>#&#123;...&#125;</code>把参数整个传递给变量避免转义，<strong>更安全</strong><br>![[Pasted image 20230827162539.png]]</p></blockquote></li></ol><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>使用参数占位符替代</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;  </span><br><span class="line">    <span class="comment">// 根据id删除数据  </span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from emp where id = #&#123;_id&#125;&quot;)</span> <span class="comment">// Mybatis提供的占位符实现动态参数 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer _id)</span>;<span class="comment">// 注解方法的参数对应#&#123;&#125;内参数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试程序</span></span><br><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 注入EmpMapper对象  </span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;  </span><br><span class="line">        empMapper.delete(<span class="number">17</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h5><p>接口有多个参数采用对象转递</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;  </span><br><span class="line"> <span class="comment">//新增员工  </span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)&quot;+  </span></span><br><span class="line"><span class="meta">            &quot;values (#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;);&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试程序</span></span><br><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 注入EmpMapper对象  </span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;  </span><br><span class="line"><span class="comment">//构造员工对象  </span></span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();  </span><br><span class="line">emp.setUsername(<span class="string">&quot;Tom&quot;</span>);  </span><br><span class="line">emp.setName(<span class="string">&quot;汤姆&quot;</span>);  </span><br><span class="line">emp.setImage(<span class="string">&quot;1.jpg&quot;</span>);  </span><br><span class="line">emp.setGender((<span class="type">short</span>)<span class="number">1</span>);  </span><br><span class="line">emp.setJob((<span class="type">short</span>)<span class="number">1</span>);  </span><br><span class="line">emp.setEntrydate(LocalDate.of(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>));  </span><br><span class="line">emp.setCreateTime(LocalDateTime.now());  </span><br><span class="line">emp.setUpdateTime(LocalDateTime.now());  </span><br><span class="line">emp.setDeptId(<span class="number">1</span>);  </span><br><span class="line">    <span class="comment">//执行新增  </span></span><br><span class="line">    empMapper.insert(emp);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要调用sout(<code>emp.getId()</code>)方法，需要在接口上方定义<code>@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</code>。</p><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><ul><li>根据id选择数据的更新<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;  </span><br><span class="line"> <span class="comment">//更新数据  </span></span><br><span class="line"><span class="meta">@Update(&quot;update emp set username = #&#123;username&#125;, name = #&#123;name&#125;, gender = #&#123;gender&#125;,image=#&#123;image&#125;,&quot;+  </span></span><br><span class="line"><span class="meta">        &quot;job = #&#123;job&#125;, entrydate = #&#123;entrydate&#125;, dept_id = #&#123;deptId&#125;, update_time = #&#123;updateTime&#125; where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试程序</span></span><br><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 注入EmpMapper对象  </span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="comment">//构造员工对象  </span></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();  </span><br><span class="line">    emp.setId(<span class="number">18</span>);</span><br><span class="line">    emp.setUsername(<span class="string">&quot;Tom1&quot;</span>);  </span><br><span class="line">    emp.setName(<span class="string">&quot;汤姆1&quot;</span>);  </span><br><span class="line">    emp.setImage(<span class="string">&quot;1.jpg&quot;</span>);  </span><br><span class="line">    emp.setGender((<span class="type">short</span>)<span class="number">1</span>);  </span><br><span class="line">    emp.setJob((<span class="type">short</span>)<span class="number">1</span>);  </span><br><span class="line">    emp.setCreateTime(LocalDateTime.now());  </span><br><span class="line">    emp.setEntrydate(LocalDate.of(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>));  </span><br><span class="line">    emp.setUpdateTime(LocalDateTime.now());  </span><br><span class="line">    emp.setDeptId(<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//执行新增  </span></span><br><span class="line">    empMapper.insert(emp);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="ID查询"><a href="#ID查询" class="headerlink" title="ID查询"></a>ID查询</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;  </span><br><span class="line"> <span class="comment">//根据Id查询员工  </span></span><br><span class="line"><span class="meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试程序</span></span><br><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 注入EmpMapper对象  </span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> empMapper.getById(<span class="number">15</span>);  </span><br><span class="line">    System.out.println(emp);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![[Pasted image 20230827225140.png|700]]</p><ul><li>方案一：起别名<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span> <span class="comment">//修改为如下</span></span><br><span class="line"><span class="meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate,&quot;+  </span></span><br><span class="line"><span class="meta">        &quot;dept_id deptId, create_time createTime, update_time updateTime from emp where id = #&#123;id&#125;&quot;)</span></span><br></pre></td></tr></table></figure></li><li>方案二：通过@Results注解手动映射数据封装<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Results(&#123;  </span></span><br><span class="line"><span class="meta">        @Result(column = &quot;dept_id&quot;,property = &quot;deptId&quot;),  </span></span><br><span class="line"><span class="meta">        @Result(column = &quot;create_time&quot;,property = &quot;createTime&quot;),  </span></span><br><span class="line"><span class="meta">        @Result(column = &quot;update_time&quot;,property = &quot;updateTime&quot;),  </span></span><br><span class="line"><span class="meta">&#125;)</span><span class="comment">// Select上方添加注解</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span></span><br></pre></td></tr></table></figure></li><li>方案三：开启Mybatis自带的驼峰命名自动映射开关 <code>a_column --&gt; aColumn</code><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.properties下 开启mybatis的驼峰民命自动映射开关  </span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 条件查询员工</span></span><br><span class="line"><span class="comment">-- 模糊查询员工姓名 性比精确查询 入职时间范围查询</span></span><br><span class="line"><span class="comment">-- 查询结果更具修改时间进行倒叙排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2020-01-01&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//条件查询员工  </span></span><br><span class="line"><span class="meta">@Select(&quot;select * from emp where name like &#x27;%$&#123;name&#125;%&#x27; and gender = #&#123;gender&#125; and &quot;+  </span></span><br><span class="line"><span class="meta">&quot;entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc;&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;  </span><br><span class="line">    List&lt;Emp&gt; empList = empMapper.list(<span class="string">&quot;张&quot;</span>,(<span class="type">short</span>) <span class="number">1</span>,LocalDate.of(<span class="number">2010</span>,<span class="number">1</span>,<span class="number">1</span>),LocalDate.of(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">1</span>));  </span><br><span class="line">    System.out.println(empList);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 此处由于name的参数展位符在引号内，不可以使用<code>%#&#123;name&#125;%</code>；要使用<code>%$&#123;name&#125;%</code>替代<br>如果要避免sql注入以及低性能等问题，可以通过<code>concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;)</code>代替原来的<code>%#&#123;name&#125;%</code><br>旧版本说明：![[Pasted image 20230827233309.png|500]]</p><h4 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h4><blockquote><p>配置sql语句的方法除了注解，还可以使用mybatis的xml映射进行<br>![[Pasted image 20230827233843.png|800]]</p></blockquote><ul><li>Resources文件下创建目录<code>com.itheima.mapper</code></li><li>XML文件内约束 <a href="https://mybatis.net.cn/">MyBatis中文网</a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;全类名，如com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 此填写sql标签，其中id属性值为要运行的方法名 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span>  </span><br><span class="line">    select *  </span><br><span class="line">    from emp    where name like &#x27;%$&#123;name&#125;%&#x27;</span><br><span class="line">and gender = #&#123;gender&#125;</span><br><span class="line">and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">order by update_time desc;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>IDEA插件 MybatisX</li></ul><h4 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h4><blockquote><p><strong>动态SQL</strong>：随着用户的输入或外部的条件变化而变化的SQL语句。<br><em>一般的SQL编写会固定搜索条件，比如说姓名 性别 入职日期；但不能单独只查询姓名，而其他为空，否则出来为null。</em><br>使用XML映射的方法，在对应类Mapper的XML文件中使用<code>&lt;if&gt; &lt;foreach&gt;</code>等标签进行动态查询</p></blockquote><h5 id="lt-if-gt-标签-–-控制"><a href="#lt-if-gt-标签-–-控制" class="headerlink" title="&lt;if&gt;标签 – 控制"></a><code>&lt;if&gt;</code>标签 – 控制</h5><ul><li><code>&lt;if&gt;</code>标签，只有当if条件判断成立时才会运行if中的sql语句</li><li>采用了<code>&lt;where&gt;</code>标签，可以自动处理代码中由于不执行if导致单独出现 <code>and</code> 和 <code>or</code> 的问题<blockquote><p>where元素只会在子元素有内容的情况下才插入where子句。而且会自动去除子句开头的and或or</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Mapper接口</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;  </span><br><span class="line">    List&lt;Emp&gt; empList = empMapper.list(<span class="string">&quot;张&quot;</span>,(<span class="type">short</span>) <span class="number">1</span>,LocalDate.of(<span class="number">2010</span>,<span class="number">1</span>,<span class="number">1</span>),LocalDate.of(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">1</span>));  </span><br><span class="line">    System.out.println(empList);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mapper映射文件（仅标签部分） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span>  </span><br><span class="line">    select *  </span><br><span class="line">    from emp    </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null&quot;</span>&gt;</span>  </span><br><span class="line">            name like &#x27;%$&#123;name&#125;%&#x27;  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span>  </span><br><span class="line">            and gender = #&#123;gender&#125;  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin!=null and end!=null&quot;</span>&gt;</span>  </span><br><span class="line">            and entrydate between #&#123;begin&#125; and #&#123;end&#125;  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span>  </span><br><span class="line">    order by update_time desc;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：其中 <code>&lt;if test=“java属性名!=null”&gt;mysql属性 =#&#123;java属性&#125;&lt;/if&gt;</code></p></blockquote></li><li>案例-动态更新员工信息</li><li>采用了<code>&lt;set&gt;</code>标签替代set并包裹 更新字段，可以去掉多余的 <code>,</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Mapper接口</span></span><br><span class="line"><span class="comment">//动态更新员工信息  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update2</span><span class="params">(Emp emp)</span>;<span class="comment">//此处可以通过mybatisX快速跳转到xml生成&lt;update&gt;标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//动态更新员工  </span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate2</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="comment">//构造员工对象  </span></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();  </span><br><span class="line">    emp.setId(<span class="number">12</span>);  </span><br><span class="line">    emp.setUsername(<span class="string">&quot;Tom111&quot;</span>);  </span><br><span class="line">    emp.setName(<span class="string">&quot;汤姆111&quot;</span>);  </span><br><span class="line">    emp.setGender((<span class="type">short</span>)<span class="number">2</span>);  </span><br><span class="line">    emp.setUpdateTime(LocalDateTime.now());  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//执行新增  </span></span><br><span class="line">    empMapper.update2(emp);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML映射文件实现动态更新（仅标签部分）--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update2&quot;</span>&gt;</span>  </span><br><span class="line">    update emp  </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span>username = #&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span>gender = #&#123;gender&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image!=null&quot;</span>&gt;</span>image = #&#123;image&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job!=null&quot;</span>&gt;</span>job = #&#123;job&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;entrydate!=null&quot;</span>&gt;</span>entrydate = #&#123;entrydate&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptId!=null&quot;</span>&gt;</span>dept_id = #&#123;deptId&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime!=null&quot;</span>&gt;</span>update_time = #&#123;updateTime&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="lt-foreach-gt-标签-–-循环遍历"><a href="#lt-foreach-gt-标签-–-循环遍历" class="headerlink" title="&lt;foreach&gt;标签 – 循环遍历"></a><code>&lt;foreach&gt;</code>标签 – 循环遍历</h5><ul><li>批量删除指定个数据 ，参考Mysql语句：<code>delete from emp where id in (18,19,20)</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(List&lt;Integer&gt; ids)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByIds</span><span class="params">()</span>&#123;  </span><br><span class="line">    List&lt;Integer&gt; ids = Arrays.asList(<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>);  </span><br><span class="line">    empMapper.deleteByIds(ids);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- XML映射文件（仅标签部分） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    collection: 遍历的集合, 对应要删除的数据id号集合，保持参数名一致</span></span><br><span class="line"><span class="comment">    item: 遍历出来的元素, 集合在循环中对于某个元素的普遍指代</span></span><br><span class="line"><span class="comment">    separator: 分隔符, 参考mysql语句 delete from emp where id in 后面跟着 18,19,20 要用逗号分隔</span></span><br><span class="line"><span class="comment">    open: 遍历开始前拼接的SQL片段  参考mysql语句 delete from emp where id in 遍历前后有 &quot;(&quot; , &quot;)&quot;</span></span><br><span class="line"><span class="comment">    close: 遍历结束后拼接的SQL片段  </span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span>  </span><br><span class="line">    delete  from emp where id in  </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span>  </span><br><span class="line">        #&#123;id&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="lt-sql-gt-lt-include-gt-标签-–-代码复用"><a href="#lt-sql-gt-lt-include-gt-标签-–-代码复用" class="headerlink" title="&lt;sql&gt; &lt;include&gt;标签 – 代码复用"></a><code>&lt;sql&gt;</code> <code>&lt;include&gt;</code>标签 – 代码复用</h5><blockquote><p>在XML映射文件中，编写代码时常常会遇到一个代码片段多次重复编写，又或者是修改某一类代码片段时，需要在多处同时修改。造成代码的复用性差。<br>而动态sql提供了标签<code>&lt;sql id=&quot;...&quot;&gt;</code>负责抽取需要重复使用的片段，<code>&lt;include refid=&quot;...&quot;&gt;</code>负责引入复用片段。</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xml映射文件（仅标签部分） --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- sql标签实现代码抽取 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;commonSelect&quot;</span>&gt;</span>  </span><br><span class="line">    select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time  </span><br><span class="line">    from emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- include标签实现代码复用 对应select ... where ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;commonSelect&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>  </span><br><span class="line">            name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span>  </span><br><span class="line">            and gender = #&#123;gender&#125;  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span>  </span><br><span class="line">            and entrydate between #&#123;begin&#125; and #&#123;end&#125;  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span>  </span><br><span class="line">    order by update_time desc  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="标签总结"><a href="#标签总结" class="headerlink" title="标签总结"></a>标签总结</h5><ul><li><code>&lt;if&gt;</code> 条件判断，只有条件成立才会拼接语句</li><li><code>&lt;where&gt;</code> 替代delete update select中的where关键字，同时处理if标签前后的and or等逻辑运算符</li><li><code>&lt;set&gt;</code> 替代update中的set关键字，同时处理if标签前后的多余逗号</li><li><code>&lt;foreach&gt;</code> 进行循环遍历</li><li><code>&lt;sql&gt;</code> 公共片段抽取</li><li><code>&lt;include&gt;</code> 公共片段取用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>视频</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-VHsIcUzb" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="9084935986" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="400px" data-preload="auto" data-theme="#ad7a86"    ></div><!-- server可选：netease tencent kugou xiami baidunetease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。 --><!-- type可选：song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）。添加单曲选的歌曲，歌单选择playlist。 -->]]></content>
      
    </entry>
    
    
  
</search>
